/* The following code was generated by JFlex 1.4_pre3 on 2/1/16 4:18 PM */

package petter.simplec;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import petter.utils.AnnotatingSymbolFactory.ExtendedLocation;
import petter.utils.Terminal;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_pre3
 * on 2/1/16 4:18 PM from the specification file
 * <tt>file:/Users/dinossimpson/Documents/MUNICH/TUM/WS16/programoptimization/project/progopt2015/simplec/jflex/Scanner.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int YY_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String yycmap_packed = 
    "\11\2\1\11\1\5\1\0\1\11\1\10\16\2\4\0\1\11\1\62"+
    "\1\0\1\41\1\1\1\0\1\56\1\0\1\44\1\45\1\4\1\53"+
    "\1\40\1\55\1\0\1\3\1\6\11\7\1\52\1\50\1\61\1\54"+
    "\1\60\1\51\1\0\32\1\1\46\1\0\1\47\1\0\1\1\1\0"+
    "\1\17\1\24\1\15\1\21\1\26\1\27\1\30\1\16\1\12\1\1"+
    "\1\33\1\25\1\36\1\13\1\22\1\35\1\1\1\20\1\31\1\14"+
    "\1\23\1\32\1\34\1\1\1\37\1\1\1\42\1\57\1\43\1\0"+
    "\41\2\2\0\4\1\4\0\1\1\2\0\1\2\7\0\1\1\4\0"+
    "\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0"+
    "\5\1\7\0\1\1\1\0\1\1\21\0\160\2\5\1\1\0\2\1"+
    "\2\0\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1"+
    "\1\0\123\1\1\0\213\1\1\0\5\2\2\0\236\1\11\0\46\1"+
    "\2\0\1\1\7\0\47\1\7\0\1\1\1\0\55\2\1\0\1\2"+
    "\1\0\2\2\1\0\2\2\1\0\1\2\10\0\33\1\5\0\3\1"+
    "\15\0\5\2\6\0\1\1\4\0\13\2\5\0\53\1\37\2\4\0"+
    "\2\1\1\2\143\1\1\0\1\1\10\2\1\0\6\2\2\1\2\2"+
    "\1\0\4\2\2\1\12\2\3\1\2\0\1\1\17\0\1\2\1\1"+
    "\1\2\36\1\33\2\2\0\131\1\13\2\1\1\16\0\12\2\41\1"+
    "\11\2\2\1\4\0\1\1\5\0\26\1\4\2\1\1\11\2\1\1"+
    "\3\2\1\1\5\2\22\0\31\1\3\2\104\0\1\1\1\0\13\1"+
    "\67\0\33\2\1\0\4\2\66\1\3\2\1\1\22\2\1\1\7\2"+
    "\12\1\2\2\2\0\12\2\1\0\7\1\1\0\7\1\1\0\3\2"+
    "\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\1\1"+
    "\3\0\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2"+
    "\1\1\10\0\1\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2"+
    "\4\1\7\0\1\1\5\0\3\2\1\0\6\1\4\0\2\1\2\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0\2\1\2\0"+
    "\1\2\1\0\5\2\4\0\2\2\2\0\3\2\3\0\1\2\7\0"+
    "\4\1\1\0\1\1\7\0\14\2\3\1\1\2\13\0\3\2\1\0"+
    "\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\2\0\1\2\1\1\10\2\1\0\3\2\1\0\3\2\2\0"+
    "\1\1\17\0\2\1\2\2\2\0\12\2\1\0\1\1\17\0\3\2"+
    "\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1"+
    "\1\0\5\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2"+
    "\10\0\2\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2\1\0"+
    "\1\1\20\0\1\2\1\1\1\0\6\1\3\0\3\1\1\0\4\1"+
    "\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1"+
    "\3\0\14\1\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1\1"+
    "\6\0\1\2\16\0\12\2\11\0\1\1\7\0\3\2\1\0\10\1"+
    "\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0\1\1"+
    "\7\2\1\0\3\2\1\0\4\2\7\0\2\2\1\0\2\1\6\0"+
    "\2\1\2\2\2\0\12\2\22\0\2\2\1\0\10\1\1\0\3\1"+
    "\1\0\27\1\1\0\12\1\1\0\5\1\2\0\1\2\1\1\7\2"+
    "\1\0\3\2\1\0\4\2\7\0\2\2\7\0\1\1\1\0\2\1"+
    "\2\2\2\0\12\2\1\0\2\1\17\0\2\2\1\0\10\1\1\0"+
    "\3\1\1\0\51\1\2\0\1\1\7\2\1\0\3\2\1\0\4\2"+
    "\1\1\10\0\1\2\10\0\2\1\2\2\2\0\12\2\12\0\6\1"+
    "\2\0\2\2\1\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1"+
    "\2\0\7\1\3\0\1\2\4\0\6\2\1\0\1\2\1\0\10\2"+
    "\22\0\2\2\15\0\60\1\1\2\2\1\7\2\4\0\10\1\10\2"+
    "\1\0\12\2\47\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\4\1\1\2\2\1\6\2\1\0"+
    "\2\2\1\1\2\0\5\1\1\0\1\1\1\0\6\2\2\0\12\2"+
    "\2\0\4\1\40\0\1\1\27\0\2\2\6\0\12\2\13\0\1\2"+
    "\1\0\1\2\1\0\1\2\4\0\2\2\10\1\1\0\44\1\4\0"+
    "\24\2\1\0\2\2\5\1\13\2\1\0\44\2\11\0\1\2\71\0"+
    "\53\1\24\2\1\1\12\2\6\0\6\1\4\2\4\1\3\2\1\1"+
    "\3\2\2\1\7\2\3\1\4\2\15\1\14\2\1\1\17\2\2\0"+
    "\46\1\1\0\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0"+
    "\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0"+
    "\4\1\2\0\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\17\1\1\0\71\1\1\0\4\1\2\0\103\1\2\0"+
    "\3\2\40\0\20\1\20\0\125\1\14\0\u026c\1\2\0\21\1\1\0"+
    "\32\1\5\0\113\1\3\0\3\1\17\0\15\1\1\0\4\1\3\2"+
    "\13\0\22\1\3\2\13\0\22\1\2\2\14\0\15\1\1\0\3\1"+
    "\1\0\2\2\14\0\64\1\40\2\3\0\1\1\3\0\2\1\1\2"+
    "\2\0\12\2\41\0\3\2\2\0\12\2\6\0\130\1\10\0\51\1"+
    "\1\2\1\1\5\0\106\1\12\0\35\1\3\0\14\2\4\0\14\2"+
    "\12\0\12\2\36\1\2\0\5\1\13\0\54\1\4\0\21\2\7\1"+
    "\2\2\6\0\12\2\46\0\27\1\5\2\4\0\65\1\12\2\1\0"+
    "\35\2\2\0\13\2\6\0\12\2\15\0\1\1\130\0\5\2\57\1"+
    "\21\2\7\1\4\0\12\2\21\0\11\2\14\0\3\2\36\1\15\2"+
    "\2\1\12\2\54\1\16\2\14\0\44\1\24\2\10\0\12\2\3\0"+
    "\3\1\12\2\44\1\122\0\3\2\1\0\25\2\4\1\1\2\4\1"+
    "\3\2\2\1\11\0\300\1\47\2\25\0\4\2\u0116\1\2\0\6\1"+
    "\2\0\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1"+
    "\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1"+
    "\5\0\3\1\1\0\7\1\16\0\5\2\32\0\5\2\20\0\2\1"+
    "\23\0\1\1\13\0\5\2\5\0\6\2\1\0\1\1\15\0\1\1"+
    "\20\0\15\1\3\0\33\1\25\0\15\2\4\0\1\2\3\0\14\2"+
    "\21\0\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1"+
    "\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1"+
    "\2\0\4\1\5\0\5\1\4\0\1\1\21\0\51\1\u0a77\0\57\1"+
    "\1\0\57\1\1\0\205\1\6\0\4\1\3\2\2\1\14\0\46\1"+
    "\1\0\1\1\5\0\1\1\2\0\70\1\7\0\1\1\17\0\1\2"+
    "\27\1\11\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\40\2\57\0"+
    "\1\1\u01d5\0\3\1\31\0\11\1\6\2\1\0\5\1\2\0\5\1"+
    "\4\0\126\1\2\0\2\2\2\0\3\1\1\0\132\1\1\0\4\1"+
    "\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0\u19b6\1"+
    "\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0\20\1"+
    "\12\2\2\1\24\0\57\1\1\2\4\0\12\2\1\0\31\1\7\0"+
    "\1\2\120\1\2\2\45\0\11\1\2\0\147\1\2\0\4\1\1\0"+
    "\4\1\14\0\13\1\115\0\12\1\1\2\3\1\1\2\4\1\1\2"+
    "\27\1\5\2\20\0\1\1\7\0\64\1\14\0\2\2\62\1\21\2"+
    "\13\0\12\2\6\0\22\2\6\1\3\0\1\1\4\0\12\2\34\1"+
    "\10\2\2\0\27\1\15\2\14\0\35\1\3\0\4\2\57\1\16\2"+
    "\16\0\1\1\12\2\46\0\51\1\16\2\11\0\3\1\1\2\10\1"+
    "\2\2\2\0\12\2\6\0\27\1\3\0\1\1\1\2\4\0\60\1"+
    "\1\2\1\1\3\2\2\1\2\2\5\1\2\2\1\1\1\2\1\1"+
    "\30\0\3\1\2\0\13\1\5\2\2\0\3\1\2\2\12\0\6\1"+
    "\2\0\6\1\2\0\6\1\11\0\7\1\1\0\7\1\221\0\43\1"+
    "\10\2\1\0\2\2\2\0\12\2\6\0\u2ba4\1\14\0\27\1\4\0"+
    "\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\2\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\15\1\3\0\20\2\20\0\7\2\14\0\2\1\30\0"+
    "\3\1\31\0\1\1\6\0\5\1\1\0\207\1\2\0\1\2\4\0"+
    "\1\1\13\0\12\2\7\0\32\1\4\0\1\1\1\0\32\1\13\0"+
    "\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\3\0"+
    "\2\1\3\0\2\1\22\0\3\2\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] yycmap = yy_unpack_cmap(yycmap_packed);


  /** 
   * Translates a state to a row index in the transition table (packed version)
   */
  final private static String yy_rowMap_packed = 
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\63\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363"+
    "\0\u0396\0\u03c9\0\u03fc\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\u05c7\0\u05fa\0\63\0\63\0\u062d\0\146\0\u0660\0\u0693"+
    "\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\63\0\u09f6\0\u0a29\0\146"+
    "\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\146\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\146"+
    "\0\146\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\146\0\146\0\u0ef1\0\146"+
    "\0\u0f24\0\u0f57\0\146\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\146\0\146\0\146\0\u10ef\0\146\0\u1122\0\u1155\0\u1188\0\146\0\146"+
    "\0\u11bb\0\146\0\146\0\146\0\u11ee\0\146\0\146";

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int [] yy_rowMap = yy_unpack_rowMap(yy_rowMap_packed);


  /** 
   * Unpacks the compressed row translation table.
   *
   * @param packed   the packed row translation table
   * @return         the unpacked row translation table
   */
  private static int [] yy_unpack_rowMap(String packed) {
    int [] map = new int[274];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 274) {
      int high = ((int) packed.charAt(i++)) << 16;
      map[j++] = high | packed.charAt(i++);
    }
    return map;
  }
  /** 
   * The packed transition table of the DFA (part 0)
   */
  private static final String yy_packed0 = 
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\6\1\12\1\3\1\13\1\14\2\3\1\15"+
    "\1\16\2\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\3\1\26\1\27\2\3\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\64\0\2\3\3\0\2\3\2\0\26\3\26\0\1\53"+
    "\1\54\47\0\1\55\62\0\1\56\14\0\2\10\60\0"+
    "\1\6\56\0\2\3\3\0\2\3\2\0\1\3\1\57"+
    "\13\3\1\60\10\3\24\0\2\3\3\0\2\3\2\0"+
    "\25\3\1\61\24\0\2\3\3\0\2\3\2\0\4\3"+
    "\1\62\1\63\2\3\1\64\15\3\24\0\2\3\3\0"+
    "\2\3\2\0\14\3\1\65\11\3\24\0\2\3\3\0"+
    "\2\3\2\0\10\3\1\66\3\3\1\67\11\3\24\0"+
    "\2\3\3\0\2\3\2\0\6\3\1\70\17\3\24\0"+
    "\2\3\3\0\2\3\2\0\10\3\1\71\15\3\24\0"+
    "\2\3\3\0\2\3\2\0\13\3\1\72\12\3\24\0"+
    "\2\3\3\0\2\3\2\0\10\3\1\73\2\3\1\74"+
    "\12\3\24\0\2\3\3\0\2\3\2\0\10\3\1\75"+
    "\15\3\24\0\2\3\3\0\2\3\2\0\4\3\1\76"+
    "\15\3\1\77\3\3\24\0\2\3\3\0\2\3\2\0"+
    "\10\3\1\100\15\3\24\0\2\3\3\0\2\3\2\0"+
    "\4\3\1\101\21\3\24\0\2\3\3\0\2\3\2\0"+
    "\6\3\1\102\17\3\76\0\1\103\1\104\62\0\1\105"+
    "\62\0\1\106\1\107\63\0\1\110\63\0\1\111\57\0"+
    "\1\112\62\0\1\113\62\0\1\114\6\0\5\53\1\115"+
    "\2\53\1\116\52\53\4\54\1\117\56\54\1\0\2\3"+
    "\3\0\2\3\2\0\2\3\1\120\23\3\24\0\2\3"+
    "\3\0\2\3\2\0\23\3\1\121\2\3\24\0\2\3"+
    "\3\0\2\3\2\0\5\3\1\122\20\3\24\0\2\3"+
    "\3\0\2\3\2\0\17\3\1\123\6\3\24\0\2\3"+
    "\3\0\2\3\2\0\1\3\1\124\24\3\24\0\2\3"+
    "\3\0\2\3\2\0\2\3\1\125\23\3\24\0\2\3"+
    "\3\0\2\3\2\0\11\3\1\126\14\3\24\0\2\3"+
    "\3\0\2\3\2\0\15\3\1\127\10\3\24\0\2\3"+
    "\3\0\2\3\2\0\14\3\1\130\11\3\24\0\2\3"+
    "\3\0\2\3\2\0\1\3\1\131\24\3\24\0\2\3"+
    "\3\0\2\3\2\0\17\3\1\132\6\3\24\0\2\3"+
    "\3\0\2\3\2\0\6\3\1\133\17\3\24\0\2\3"+
    "\3\0\2\3\2\0\10\3\1\134\15\3\24\0\2\3"+
    "\3\0\2\3\2\0\2\3\1\135\23\3\24\0\2\3"+
    "\3\0\2\3\2\0\10\3\1\136\15\3\24\0\2\3"+
    "\3\0\2\3\2\0\1\137\25\3\24\0\2\3\3\0"+
    "\2\3\2\0\1\140\25\3\24\0\2\3\3\0\2\3"+
    "\2\0\1\141\25\3\24\0\2\3\3\0\2\3\2\0"+
    "\5\3\1\142\20\3\30\0\1\115\55\0\3\54\1\115"+
    "\1\117\56\54\1\0\2\3\3\0\2\3\2\0\14\3"+
    "\1\143\11\3\24\0\2\3\3\0\2\3\2\0\6\3"+
    "\1\144\17\3\24\0\2\3\3\0\2\3\2\0\14\3"+
    "\1\145\11\3\24\0\2\3\3\0\2\3\2\0\2\3"+
    "\1\146\23\3\24\0\2\3\3\0\2\3\2\0\11\3"+
    "\1\147\14\3\24\0\2\3\3\0\2\3\2\0\12\3"+
    "\1\150\13\3\24\0\2\3\3\0\2\3\2\0\5\3"+
    "\1\151\20\3\24\0\2\3\3\0\2\3\2\0\5\3"+
    "\1\152\20\3\24\0\2\3\3\0\2\3\2\0\16\3"+
    "\1\153\7\3\24\0\2\3\3\0\2\3\2\0\14\3"+
    "\1\154\11\3\24\0\2\3\3\0\2\3\2\0\5\3"+
    "\1\155\20\3\24\0\2\3\3\0\2\3\2\0\10\3"+
    "\1\156\15\3\24\0\2\3\3\0\2\3\2\0\6\3"+
    "\1\157\17\3\24\0\2\3\3\0\2\3\2\0\2\3"+
    "\1\160\23\3\24\0\2\3\3\0\2\3\2\0\7\3"+
    "\1\161\16\3\24\0\2\3\3\0\2\3\2\0\13\3"+
    "\1\162\12\3\24\0\2\3\3\0\2\3\2\0\16\3"+
    "\1\163\7\3\24\0\2\3\3\0\2\3\2\0\7\3"+
    "\1\164\16\3\24\0\2\3\3\0\2\3\2\0\1\165"+
    "\25\3\24\0\2\3\3\0\2\3\2\0\6\3\1\166"+
    "\17\3\24\0\2\3\3\0\2\3\2\0\13\3\1\167"+
    "\12\3\24\0\2\3\3\0\2\3\2\0\11\3\1\170"+
    "\14\3\24\0\2\3\3\0\2\3\2\0\21\3\1\171"+
    "\4\3\24\0\2\3\3\0\2\3\2\0\2\3\1\172"+
    "\23\3\24\0\2\3\3\0\2\3\2\0\2\3\1\173"+
    "\23\3\24\0\2\3\3\0\2\3\2\0\3\3\1\174"+
    "\22\3\24\0\2\3\3\0\2\3\2\0\14\3\1\175"+
    "\11\3\24\0\2\3\3\0\2\3\2\0\24\3\1\176"+
    "\1\3\24\0\2\3\3\0\2\3\2\0\14\3\1\177"+
    "\11\3\24\0\2\3\3\0\2\3\2\0\1\3\1\200"+
    "\24\3\24\0\2\3\3\0\2\3\2\0\1\3\1\201"+
    "\24\3\24\0\2\3\3\0\2\3\2\0\14\3\1\202"+
    "\11\3\24\0\2\3\3\0\2\3\2\0\13\3\1\203"+
    "\12\3\24\0\2\3\3\0\2\3\2\0\4\3\1\204"+
    "\21\3\24\0\2\3\3\0\2\3\2\0\5\3\1\205"+
    "\20\3\24\0\2\3\3\0\2\3\2\0\15\3\1\206"+
    "\10\3\24\0\2\3\3\0\2\3\2\0\11\3\1\207"+
    "\14\3\24\0\2\3\3\0\2\3\2\0\2\3\1\210"+
    "\23\3\24\0\2\3\3\0\2\3\2\0\14\3\1\211"+
    "\11\3\23\0";

  /** 
   * The transition table of the DFA
   */
  private static final int yytrans [] = yy_unpack();


  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_ILLEGAL_STATE = 1;
  private static final int YY_NO_MATCH = 2;
  private static final int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final byte YY_ATTRIBUTE[] = {
     0,  9,  1,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  private boolean reportComments=false;
  public Lexer(java.io.InputStream in, ComplexSymbolFactory sf) {
    this(in,sf,false);
  }
  public Lexer(java.io.InputStream in, ComplexSymbolFactory sf, boolean reportComments) {
    this(new java.io.InputStreamReader(in));
    symbolFactory = sf;
    this.reportComments = reportComments;
  }
    ComplexSymbolFactory symbolFactory;

  private Symbol symbol(String name, int sym) {
    return symbolFactory.newSymbol(name, sym, new ExtendedLocation(yyline+1,yycolumn+1,yychar), new ExtendedLocation(yyline+1,yycolumn+yylength(),yychar+yylength()));
  }
  
  private Symbol symbol(String name, int sym, Terminal val) {
      ExtendedLocation left = new ExtendedLocation(yyline+1,yycolumn+1,yychar);
      ExtendedLocation right=	  new ExtendedLocation(yyline+1,yycolumn+yylength(), yychar+yylength());
      val.putAnnotation("__location_left", left);
      val.putAnnotation("__location_right", right);
      return symbolFactory.newSymbol(name, sym, left, right,val);
  }       
  
  private void error(String message) {
    System.err.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4641];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2252) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 37: 
          {  return symbol("Address-Of operator",ADDOFOP);  }
        case 138: break;
        case 90: 
          {  return symbol("for",  FOR);  }
        case 139: break;
        case 53: 
          {  return symbol("do",   DO);  }
        case 140: break;
        case 107: 
          {  return symbol("else",  ELSE);  }
        case 141: break;
        case 23: 
          {  return symbol("Comma",COMMA);  }
        case 142: break;
        case 24: 
          {  return symbol("Hash", HASH);  }
        case 143: break;
        case 74: 
          {  return symbol("Less or equals operator",LEQ);  }
        case 144: break;
        case 28: 
          {  return symbol("Right paranthesis",RPAR);  }
        case 145: break;
        case 27: 
          {  return symbol("Left paranthesis",LPAR);  }
        case 146: break;
        case 2: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 46: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 108: 
        case 110: 
        case 111: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 123: 
        case 125: 
        case 126: 
        case 127: 
        case 130: 
        case 134: 
          {  return symbol("Identifier",IDENT, new Terminal<String>(yytext()));  }
        case 147: break;
        case 5: 
        case 8: 
          {  /* ignore */ yylength();  }
        case 148: break;
        case 6: 
        case 7: 
          {  return symbol("Integer Constant", INTCONST, new Terminal<Integer>(Integer.parseInt(yytext())));  }
        case 149: break;
        case 124: 
          {  return symbol("while",  WHILE);  }
        case 150: break;
        case 129: 
          {  return symbol("double",   DOUBLE);  }
        case 151: break;
        case 131: 
          {  return symbol("switch",     SWITCH);  }
        case 152: break;
        case 25: 
          {  return symbol("Left Bracket",BEGIN);  }
        case 153: break;
        case 41: 
          {  return symbol("Not operator",NOT);  }
        case 154: break;
        case 30: 
          {  return symbol("Right square bracket",RSQ);  }
        case 155: break;
        case 29: 
          {  return symbol("Left square bracket",LSQ);  }
        case 156: break;
        case 4: 
          {  return symbol("Times operator",MULOP);  }
        case 157: break;
        case 34: 
          {  return symbol("Plus operator",ADDOP);  }
        case 158: break;
        case 36: 
          {  return symbol("Minus operator",SUBOP);  }
        case 159: break;
        case 40: 
          {  return symbol("Less operator",LT);  }
        case 160: break;
        case 132: 
          {  return symbol("pragma",  PRAGMA);  }
        case 161: break;
        case 120: 
          {  return symbol("break",   BREAK);  }
        case 162: break;
        case 73: 
          {  return symbol("Greater or equals operator",GEQ);  }
        case 163: break;
        case 72: 
          {  return symbol("Or operator",OR);  }
        case 164: break;
        case 75: 
          {  return symbol("Not equals operator",NEQ);  }
        case 165: break;
        case 133: 
          {  return symbol("typedef", TYPEDEF);  }
        case 166: break;
        case 112: 
          {  return symbol("void",    VOID );  }
        case 167: break;
        case 136: 
          {  return symbol("continue",CONTINUE);  }
        case 168: break;
        case 32: 
          {  return symbol("Question mark",QUESTIONMARK);  }
        case 169: break;
        case 66: 
          {  return symbol("Increment",INCOP);  }
        case 170: break;
        case 121: 
          {  return symbol("float",   FLOAT);  }
        case 171: break;
        case 106: 
          {  return symbol("long",   LONG);  }
        case 172: break;
        case 1: 
        case 38: 
          {   /* throw new Error("Illegal character <"+ yytext()+">");*/
		    return symbol("Illegal character (sequence): \""+ yytext()+"\"",ILLEGAL);
                   }
        case 173: break;
        case 47: 
          {  return symbol("if",  IF);  }
        case 174: break;
        case 79: 
          {  return symbol("int",     INT);  }
        case 175: break;
        case 122: 
          {  return symbol("short",   SHORT);  }
        case 176: break;
        case 109: 
          {  return symbol("goto",    GOTO);  }
        case 177: break;
        case 26: 
          {  return symbol("Right Bracket",END);  }
        case 178: break;
        case 135: 
          {  return symbol("default", DEFAULT);  }
        case 179: break;
        case 128: 
          {  return symbol("return",  RETURN);  }
        case 180: break;
        case 31: 
          {  return symbol("Semi colon",SEMI);  }
        case 181: break;
        case 35: 
          {  return symbol("Assignment operator",ASSIGN);  }
        case 182: break;
        case 70: 
          {  return symbol("Decrement",DECOP);  }
        case 183: break;
        case 3: 
          {  return symbol("Divide operator",DIVOP);  }
        case 184: break;
        case 71: 
          {  return symbol("And operator",AND);  }
        case 185: break;
        case 100: 
          {  return symbol("case",    CASE);  }
        case 186: break;
        case 99: 
          {  return symbol("char",   CHAR);  }
        case 187: break;
        case 76: 
        case 77: 
          {  if (reportComments) return symbol("comment",COMMENT); else yylength();  }
        case 188: break;
        case 39: 
          {  return symbol("Greater operator",GT);  }
        case 189: break;
        case 68: 
          {  return symbol("Equals operator",EQ);  }
        case 190: break;
        case 44: 
          {  return symbol("DIVEQ operator",DIVEQ);  }
        case 191: break;
        case 45: 
          {  return symbol("MULEQ operator",MULEQ);  }
        case 192: break;
        case 67: 
          {  return symbol("PLUSEQ operator", PLUSEQ);  }
        case 193: break;
        case 69: 
          {  return symbol("MINUSEQ operator", MINUSEQ);  }
        case 194: break;
        case 33: 
          {  return symbol("COLON operator", COLON);  }
        case 195: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {      return symbolFactory.newSymbol("EOF", EOF, new ExtendedLocation(yyline+1,yycolumn+1,yychar), new ExtendedLocation(yyline+1,yycolumn+1,yychar+1));
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   * <a href="http://meissner.v0.net/msd.htm">meissner.v0.net/msd.htm</a>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] class_fields = sym.class.getFields();
      for (int i = 0; i < class_fields.length; i++) {
        if (class_fields[i].getInt(null) == token) {
          return class_fields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   * <a href="http://meissner.v0.net/msd.htm">meissner.v0.net/msd.htm</a>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          scanner = new Lexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.yy_atEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
