
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 01 15:16:38 CET 2016
//----------------------------------------------------

package petter.simplec;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import petter.cfg.*;
import petter.cfg.expression.*;
import petter.cfg.edges.*;
import petter.utils.Tupel;
import petter.utils.Tripel;
import petter.utils.Terminal;
import petter.utils.AnnotatableList;
import petter.utils.PostProcessVisitor;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 01 15:16:38 CET 2016
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\003\000\002\002\004\000\002\020" +
    "\002\000\002\003\007\000\002\003\004\000\002\003\002" +
    "\000\002\004\003\000\002\004\005\000\002\005\004\000" +
    "\002\005\006\000\002\012\005\000\002\012\003\000\002" +
    "\012\002\000\002\021\002\000\002\022\002\000\002\006" +
    "\014\000\002\023\002\000\002\024\002\000\002\007\007" +
    "\000\002\014\005\000\002\014\003\000\002\013\005\000" +
    "\002\013\003\000\002\011\004\000\002\011\002\000\002" +
    "\010\004\000\002\010\002\000\002\015\005\000\002\025" +
    "\002\000\002\015\006\000\002\015\011\000\002\015\010" +
    "\000\002\015\006\000\002\026\002\000\002\027\002\000" +
    "\002\030\002\000\002\031\002\000\002\015\017\000\002" +
    "\032\002\000\002\015\012\000\002\033\002\000\002\015" +
    "\010\000\002\034\002\000\002\015\011\000\002\035\002" +
    "\000\002\015\005\000\002\036\002\000\002\015\006\000" +
    "\002\015\003\000\002\037\002\000\002\015\005\000\002" +
    "\040\002\000\002\015\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\017\005\000\002\017\004\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\006\002\ufffc\004\ufffc\001\002\000\004\002" +
    "\247\001\002\000\006\002\001\004\007\001\002\000\006" +
    "\002\ufffd\004\ufffd\001\002\000\004\063\010\001\002\000" +
    "\010\030\ufff4\056\015\057\ufffb\001\002\000\004\057\uffff" +
    "\001\002\000\004\057\013\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\030\057\001\002\000\016\030\021" +
    "\033\020\034\024\036\017\062\016\063\022\001\002\000" +
    "\040\024\uffcb\031\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\042\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\057\uffcb\001\002\000\016\030\021\033\020" +
    "\034\024\036\017\062\016\063\022\001\002\000\004\063" +
    "\055\001\002\000\016\030\021\033\020\034\024\036\017" +
    "\062\016\063\022\001\002\000\056\024\uffcc\031\uffcc\033" +
    "\040\034\044\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc" +
    "\043\037\044\042\045\041\046\036\047\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\043\057\uffcc" +
    "\001\002\000\016\024\ufffa\035\030\036\026\037\027\040" +
    "\031\057\ufffa\001\002\000\004\063\025\001\002\000\040" +
    "\024\uffbf\031\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\042" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\057\uffbf\001\002\000\016\030\021\033\020\034" +
    "\024\036\017\062\016\063\022\001\002\000\016\030\021" +
    "\033\020\034\024\036\017\062\016\063\022\001\002\000" +
    "\016\030\021\033\020\034\024\036\017\062\016\063\022" +
    "\001\002\000\016\030\021\033\020\034\024\036\017\062" +
    "\016\063\022\001\002\000\040\024\uffc4\031\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\042\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\001\002" +
    "\000\040\024\uffc5\031\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\042\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\057\uffc5\001\002\000\040\024\uffc6\031" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\057" +
    "\uffc6\001\002\000\040\024\uffc3\031\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\042\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\057\uffc3\001\002\000\016" +
    "\030\021\033\020\034\024\036\017\062\016\063\022\001" +
    "\002\000\016\030\021\033\020\034\024\036\017\062\016" +
    "\063\022\001\002\000\040\024\uffc1\031\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\042\uffc1\047\uffc1\050\uffc1\051\uffc1" +
    "\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1\001\002\000" +
    "\016\030\021\033\020\034\024\036\017\062\016\063\022" +
    "\001\002\000\016\030\021\033\020\034\024\036\017\062" +
    "\016\063\022\001\002\000\020\030\021\032\045\033\020" +
    "\034\024\036\017\062\016\063\022\001\002\000\040\024" +
    "\uffc2\031\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\057\uffc2\001\002\000\040\024\uffca\031\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\042\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\057\uffca\001\002" +
    "\000\040\024\uffc9\031\uffc9\035\030\036\026\037\027\040" +
    "\031\042\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\057\uffc9\001\002\000\040\024\uffbd\031" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\042\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\057" +
    "\uffbd\001\002\000\040\024\uffbb\031\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\042\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\057\uffbb\001\002\000\040" +
    "\024\uffbe\031\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\042" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\057\uffbe\001\002\000\040\024\uffbc\031\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc\001" +
    "\002\000\014\031\054\035\030\036\026\037\027\040\031" +
    "\001\002\000\040\024\uffc7\031\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\042\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\057\uffc7\001\002\000\040\024" +
    "\uffc0\031\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\057\uffc0\001\002\000\040\024\uffc8\031\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\042\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\001\002" +
    "\000\006\004\062\031\ufff5\001\002\000\004\031\070\001" +
    "\002\000\006\024\066\031\ufff6\001\002\000\004\063\063" +
    "\001\002\000\010\024\ufff9\031\ufff9\056\064\001\002\000" +
    "\016\030\021\033\020\034\024\036\017\062\016\063\022" +
    "\001\002\000\016\024\ufff8\031\ufff8\035\030\036\026\037" +
    "\027\040\031\001\002\000\006\004\062\031\ufff5\001\002" +
    "\000\004\031\ufff7\001\002\000\004\026\071\001\002\000" +
    "\044\004\076\006\103\007\uffdb\010\uffe0\012\106\013\110" +
    "\014\072\021\077\022\104\026\ufff1\027\uffe9\030\021\033" +
    "\020\034\024\036\017\062\016\063\074\001\002\000\004" +
    "\057\uffce\001\002\000\044\004\076\006\103\007\uffdb\010" +
    "\uffe0\012\106\013\110\014\072\021\077\022\104\026\ufff1" +
    "\027\uffe9\030\021\033\020\034\024\036\017\062\016\063" +
    "\074\001\002\000\034\030\226\033\040\034\044\035\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\043\037\044\042\045\041\046" +
    "\036\056\227\057\uffcc\001\002\000\014\035\030\036\026" +
    "\037\027\040\031\057\uffd5\001\002\000\004\063\216\001" +
    "\002\000\004\030\210\001\002\000\004\010\174\001\002" +
    "\000\004\007\165\001\002\000\004\026\161\001\002\000" +
    "\016\030\021\033\020\034\024\036\017\062\016\063\022" +
    "\001\002\000\004\030\117\001\002\000\004\027\ufff3\001" +
    "\002\000\004\011\113\001\002\000\046\004\uffd1\006\uffd1" +
    "\007\uffd1\010\uffd1\012\uffd1\013\uffd1\014\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\026\uffd1\027\uffd1\030\uffd1\033\uffd1\034\uffd1" +
    "\036\uffd1\062\uffd1\063\uffd1\001\002\000\004\057\uffd0\001" +
    "\002\000\004\057\112\001\002\000\046\004\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\026\uffcf\027\uffcf\030\uffcf\033\uffcf\034\uffcf" +
    "\036\uffcf\062\uffcf\063\uffcf\001\002\000\004\063\114\001" +
    "\002\000\046\004\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\021\uffe6\022\uffe6\023\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\033\uffe6\034\uffe6\036\uffe6\062\uffe6\063\uffe6" +
    "\001\002\000\004\027\116\001\002\000\006\002\ufff2\004" +
    "\ufff2\001\002\000\020\030\120\033\020\034\024\036\017" +
    "\041\123\062\016\063\022\001\002\000\020\030\120\033" +
    "\020\034\024\036\017\041\123\062\016\063\022\001\002" +
    "\000\010\031\uffd7\047\126\050\125\001\002\000\026\035" +
    "\030\036\026\037\027\040\031\042\132\051\134\052\136" +
    "\053\131\054\135\055\133\001\002\000\020\030\120\033" +
    "\020\034\024\036\017\041\123\062\016\063\022\001\002" +
    "\000\012\031\uffb9\047\126\050\125\057\uffb9\001\002\000" +
    "\020\030\120\033\020\034\024\036\017\041\123\062\016" +
    "\063\022\001\002\000\020\030\120\033\020\034\024\036" +
    "\017\041\123\062\016\063\022\001\002\000\012\031\uffb6" +
    "\047\uffb6\050\uffb6\057\uffb6\001\002\000\012\031\uffb5\047" +
    "\uffb5\050\uffb5\057\uffb5\001\002\000\016\030\021\033\020" +
    "\034\024\036\017\062\016\063\022\001\002\000\016\030" +
    "\021\033\020\034\024\036\017\062\016\063\022\001\002" +
    "\000\016\030\021\033\020\034\024\036\017\062\016\063" +
    "\022\001\002\000\016\030\021\033\020\034\024\036\017" +
    "\062\016\063\022\001\002\000\016\030\021\033\020\034" +
    "\024\036\017\062\016\063\022\001\002\000\016\030\021" +
    "\033\020\034\024\036\017\062\016\063\022\001\002\000" +
    "\022\031\uffb3\035\030\036\026\037\027\040\031\047\uffb3" +
    "\050\uffb3\057\uffb3\001\002\000\022\031\uffb2\035\030\036" +
    "\026\037\027\040\031\047\uffb2\050\uffb2\057\uffb2\001\002" +
    "\000\022\031\uffb4\035\030\036\026\037\027\040\031\047" +
    "\uffb4\050\uffb4\057\uffb4\001\002\000\022\031\uffb1\035\030" +
    "\036\026\037\027\040\031\047\uffb1\050\uffb1\057\uffb1\001" +
    "\002\000\022\031\uffb7\035\030\036\026\037\027\040\031" +
    "\047\uffb7\050\uffb7\057\uffb7\001\002\000\022\031\uffba\035" +
    "\030\036\026\037\027\040\031\047\uffba\050\uffba\057\uffba" +
    "\001\002\000\004\031\146\001\002\000\042\004\076\006" +
    "\103\007\uffdb\010\uffe0\012\106\013\110\014\072\021\077" +
    "\022\104\026\ufff1\030\021\033\020\034\024\036\017\062" +
    "\016\063\074\001\002\000\046\004\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\012\uffe7\013\uffe7\014\uffe7\021\uffe7\022\uffe7\023" +
    "\151\026\uffe7\027\uffe7\030\uffe7\033\uffe7\034\uffe7\036\uffe7" +
    "\062\uffe7\063\uffe7\001\002\000\046\004\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6\021\uffd6\022\uffd6" +
    "\023\uffd6\026\uffd6\027\uffd6\030\uffd6\033\uffd6\034\uffd6\036" +
    "\uffd6\062\uffd6\063\uffd6\001\002\000\042\004\076\006\103" +
    "\007\uffdb\010\uffe0\012\106\013\110\014\072\021\077\022" +
    "\104\026\ufff1\030\021\033\020\034\024\036\017\062\016" +
    "\063\074\001\002\000\046\004\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\033\uffe8\034\uffe8\036\uffe8\062" +
    "\uffe8\063\uffe8\001\002\000\010\031\155\047\126\050\125" +
    "\001\002\000\030\031\054\035\030\036\026\037\027\040" +
    "\031\042\132\051\134\052\136\053\131\054\135\055\133" +
    "\001\002\000\012\031\uffb8\047\uffb8\050\uffb8\057\uffb8\001" +
    "\002\000\014\035\030\036\026\037\027\040\031\057\uffd3" +
    "\001\002\000\004\057\160\001\002\000\046\004\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\026\uffd2\027\uffd2\030\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\062\uffd2\063\uffd2\001\002\000\044\004\076" +
    "\006\103\007\uffdb\010\uffe0\012\106\013\110\014\072\021" +
    "\077\022\104\026\ufff1\027\uffe9\030\021\033\020\034\024" +
    "\036\017\062\016\063\074\001\002\000\004\027\ufff0\001" +
    "\002\000\004\027\164\001\002\000\046\004\uffef\006\uffef" +
    "\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef\021\uffef\022" +
    "\uffef\023\uffef\026\uffef\027\uffef\030\uffef\033\uffef\034\uffef" +
    "\036\uffef\062\uffef\063\uffef\001\002\000\042\004\076\006" +
    "\103\007\uffdb\010\uffe0\012\106\013\110\014\072\021\077" +
    "\022\104\026\ufff1\030\021\033\020\034\024\036\017\062" +
    "\016\063\074\001\002\000\004\021\167\001\002\000\004" +
    "\030\170\001\002\000\020\030\120\033\020\034\024\036" +
    "\017\041\123\062\016\063\022\001\002\000\010\031\172" +
    "\047\126\050\125\001\002\000\004\057\173\001\002\000" +
    "\046\004\uffda\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda" +
    "\014\uffda\021\uffda\022\uffda\023\uffda\026\uffda\027\uffda\030" +
    "\uffda\033\uffda\034\uffda\036\uffda\062\uffda\063\uffda\001\002" +
    "\000\004\030\175\001\002\000\016\030\021\033\020\034" +
    "\024\036\017\062\016\063\022\001\002\000\014\035\030" +
    "\036\026\037\027\040\031\057\uffdf\001\002\000\004\057" +
    "\200\001\002\000\020\030\120\033\020\034\024\036\017" +
    "\041\123\062\016\063\022\001\002\000\010\047\126\050" +
    "\125\057\uffde\001\002\000\004\057\203\001\002\000\016" +
    "\030\021\033\020\034\024\036\017\062\016\063\022\001" +
    "\002\000\014\031\uffdd\035\030\036\026\037\027\040\031" +
    "\001\002\000\004\031\206\001\002\000\042\004\076\006" +
    "\103\007\uffdb\010\uffe0\012\106\013\110\014\072\021\077" +
    "\022\104\026\ufff1\030\021\033\020\034\024\036\017\062" +
    "\016\063\074\001\002\000\046\004\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\012\uffdc\013\uffdc\014\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\033\uffdc\034\uffdc\036\uffdc" +
    "\062\uffdc\063\uffdc\001\002\000\020\030\120\033\020\034" +
    "\024\036\017\041\123\062\016\063\022\001\002\000\010" +
    "\031\uffd9\047\126\050\125\001\002\000\004\031\213\001" +
    "\002\000\042\004\076\006\103\007\uffdb\010\uffe0\012\106" +
    "\013\110\014\072\021\077\022\104\026\ufff1\030\021\033" +
    "\020\034\024\036\017\062\016\063\074\001\002\000\046" +
    "\004\uffd8\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\033\uffd8\034\uffd8\036\uffd8\062\uffd8\063\uffd8\001\002\000" +
    "\004\057\uffe5\001\002\000\010\024\ufffb\056\015\057\ufffb" +
    "\001\002\000\006\024\220\057\uffed\001\002\000\004\063" +
    "\216\001\002\000\004\057\uffee\001\002\000\004\057\223" +
    "\001\002\000\046\004\uffe4\006\uffe4\007\uffe4\010\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\021\uffe4\022\uffe4\023\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\033\uffe4\034\uffe4\036\uffe4\062\uffe4\063" +
    "\uffe4\001\002\000\004\057\225\001\002\000\046\004\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4\033\uffd4" +
    "\034\uffd4\036\uffd4\062\uffd4\063\uffd4\001\002\000\004\031" +
    "\242\001\002\000\020\030\021\032\045\033\020\034\024" +
    "\036\017\062\016\063\230\001\002\000\034\030\231\033" +
    "\040\034\044\035\uffcc\036\uffcc\037\uffcc\040\uffcc\043\037" +
    "\044\042\045\041\046\036\056\043\057\uffcc\001\002\000" +
    "\020\030\021\031\233\033\020\034\024\036\017\062\016" +
    "\063\022\001\002\000\004\031\240\001\002\000\004\057" +
    "\237\001\002\000\016\024\235\031\uffeb\035\030\036\026" +
    "\037\027\040\031\001\002\000\016\030\021\033\020\034" +
    "\024\036\017\062\016\063\022\001\002\000\004\031\uffec" +
    "\001\002\000\046\004\uffe2\006\uffe2\007\uffe2\010\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\021\uffe2\022\uffe2\023\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\033\uffe2\034\uffe2\036\uffe2\062\uffe2\063" +
    "\uffe2\001\002\000\004\057\241\001\002\000\046\004\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\033\uffe3" +
    "\034\uffe3\036\uffe3\062\uffe3\063\uffe3\001\002\000\004\057" +
    "\243\001\002\000\046\004\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\021\uffe1\022\uffe1\023\uffe1\026" +
    "\uffe1\027\uffe1\030\uffe1\033\uffe1\034\uffe1\036\uffe1\062\uffe1" +
    "\063\uffe1\001\002\000\004\027\uffea\001\002\000\004\057" +
    "\246\001\002\000\046\004\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\021\uffcd\022\uffcd\023\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\033\uffcd\034\uffcd\036\uffcd\062\uffcd" +
    "\063\uffcd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\006\005\001\001\000\002\001\001\000\004" +
    "\004\010\001\001\000\004\021\013\001\001\000\004\020" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\022\001\001\000\002\001\001\000" +
    "\004\016\055\001\001\000\002\001\001\000\004\016\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\034\001\001\000\004" +
    "\016\033\001\001\000\004\016\032\001\001\000\004\016" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\051\001\001\000" +
    "\004\016\050\001\001\000\002\001\001\000\004\016\047" +
    "\001\001\000\004\016\046\001\001\000\004\016\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\060\012\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\064\001\001\000\002\001" +
    "\001\000\006\005\060\012\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\106\011\104\015\072\016" +
    "\074\023\101\026\077\032\100\001\001\000\004\040\244" +
    "\001\001\000\020\007\106\011\243\015\072\016\074\023" +
    "\101\026\077\032\100\001\001\000\002\001\001\000\004" +
    "\035\223\001\001\000\006\004\216\014\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\155\001\001\000\002\001\001\000" +
    "\004\022\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\121\017\120\001\001\000" +
    "\006\016\153\017\152\001\001\000\004\034\144\001\001" +
    "\000\002\001\001\000\006\016\121\017\123\001\001\000" +
    "\002\001\001\000\006\016\121\017\127\001\001\000\006" +
    "\016\121\017\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\143\001\001\000\004\016\142\001\001" +
    "\000\004\016\141\001\001\000\004\016\140\001\001\000" +
    "\004\016\137\001\001\000\004\016\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\106\015\146\016\074\023\101\026\077\032" +
    "\100\001\001\000\004\010\147\001\001\000\002\001\001" +
    "\000\016\007\106\015\151\016\074\023\101\026\077\032" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\106\011\161" +
    "\015\072\016\074\023\101\026\077\032\100\001\001\000" +
    "\004\024\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\106\015\165\016\074\023\101\026\077\032" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\121\017\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\175" +
    "\001\001\000\004\027\176\001\001\000\002\001\001\000" +
    "\006\016\121\017\200\001\001\000\004\030\201\001\001" +
    "\000\002\001\001\000\004\016\203\001\001\000\004\031" +
    "\204\001\001\000\002\001\001\000\016\007\106\015\206" +
    "\016\074\023\101\026\077\032\100\001\001\000\002\001" +
    "\001\000\006\016\121\017\210\001\001\000\004\033\211" +
    "\001\001\000\002\001\001\000\016\007\106\015\213\016" +
    "\074\023\101\026\077\032\100\001\001\000\002\001\001" +
    "\000\004\025\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\216\014\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\045\001\001" +
    "\000\002\001\001\000\006\013\231\016\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\235\016\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    petter.utils.SymbolTable sym = new petter.utils.SymbolTable();
    public int blocknestingdepth = 0;
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
	try{
	    sym.newLocal("return");
	} catch (Exception e) {System.out.println("variable return could not be created");}
    }

    public Stack<Tupel<State, State>> loopStack = new Stack<Tupel<State, State>>();

    public Hashtable<Integer, Expression> prefix  = new Hashtable<Integer, Expression>();
    public Hashtable<Integer, Expression> postfix  = new Hashtable<Integer, Expression>();

    public void throwException(String s) throws Exception{
	throw new Exception(s);
    }

    public State createState(){
        State s = new State();
        s.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return s;
    }
    public Transition createAssignmentEdge(State start, State end, Variable lhs, Expression rhs){
        Transition result = TransitionFactory.createAssignment(start, end, lhs, rhs);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Transition createNullEdge(State start, State end){
        Transition result = TransitionFactory.createNop(start, end);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Transition createAssertionEdge(State start, State end, Expression ex, Operator op){
        Transition result = TransitionFactory.createGuard(start, end, ex,op);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Transition createMethodCallEdge(State start, State end, petter.cfg.expression.MethodCall m){
        Transition result = TransitionFactory.createMethodCall(start, end, m);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Expression obtainExpr(String i) throws Exception{
	int num = sym.getId(i); 
	if (num==-1) throw new Exception("Identifier "+i+" never declared");
	if(prefix.get(num) != null){
	    return prefix.get(num);
	}else return new Variable(num, i);
    }

    public Tupel<State,State> generatePrePostFixes(){
        State superStart;
        State start = createState();
        superStart = start;
	Tupel<State, State> prefix = generatePreFixes();
	Tupel<State, State> postfix =generatePostFixes(true);
	mergeStates(postfix.a, prefix.b);
        return new Tupel<State, State>(prefix.a, postfix.b);

    }

  public Tupel<State,State> generatePreFixes(){
        State superStart;
        State start = createState();
        superStart = start;
        for(Integer i : prefix.keySet()){
            State connect = createState();
            Transition e = createAssignmentEdge(start, connect, new Variable(i,  sym.getName(i)), prefix.get(i));
	    e.putAnnotation( "__location_left", prefix.get(i).getAnnotation("__location_left"));
	    e.putAnnotation( "__location_right", prefix.get(i).getAnnotation("__location_right"));
	    //System.out.println("annotion of assign edge: "+e.getAnnotations());
	    start.putAnnotation("__location", e.getAnnotation("__location_left"));
	    connect.putAnnotation("__location", e.getAnnotation("__location_right"));
	    start = connect;
	   
        }
        prefix.clear();
	return new Tupel<State, State>(superStart, start);

    }

 public Tupel<State,State> generatePostFixes(boolean clear){
        State superStart;
        State start = createState();
        superStart = start;
	for(Integer i : postfix.keySet()){
            State connect = createState();
            Transition e = createAssignmentEdge(start, connect, new Variable(i,  sym.getName(i)), postfix.get(i));
	    e.putAnnotation( "__location_left", postfix.get(i).getAnnotation("__location_left"));
	    e.putAnnotation( "__location_right", postfix.get(i).getAnnotation("__location_right"));
	    //System.out.println("annotion of assign edge: "+e.getAnnotations());
	    start.putAnnotation("__location", e.getAnnotation("__location_left"));
	    connect.putAnnotation("__location", e.getAnnotation("__location_right"));
            start = connect;
        } 
        if (clear) postfix.clear();
        return new Tupel<State, State>(superStart, start);

    }




    public  void mergeStates(State news, State old){
	Iterator<Transition> iter = old.getInIterator();
	if(!iter.hasNext()) 
	{Transition e = createNullEdge(old, news); 
	e.putAnnotation( "__location_left", news.getAnnotation("__location"));
	e.putAnnotation( "__location_right", old.getAnnotation("__location"));
	if(old.isLoopSeparator()) news.setLoopSeparator(true);
	if(old.getAnnotation("__label") != null) news.putAnnotation("__label", old.getAnnotation("__label"));
	return; }
	
	while(iter.hasNext()){
	    Transition e = iter.next();
	    if(news.getAnnotation("__location") == null){
		news.putAnnotation("__location", old.getAnnotation("__location"));
	    }
	    if(old.getAnnotation("__location") == null){
		old.putAnnotation("__location", news.getAnnotation("__location"));
	    }
	    e.setDest(news);
        }
    }


    /** Report a fatal error.  This method takes a  message string and an 
     *  additional object (to be used by specializations implemented in 
     *  subclasses).  Here in the base class a very simple implementation 
     *  is provided which reports the error then throws an exception. 
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    @Override
    public void report_fatal_error(String message, Object   info) throws Exception {
        System.err.println("FATAL: "+message+" "+info);
        throw new Exception("in Simple C Compiler:\n  "+ message+ "\n  occured at "+info);
    }
    /** Report a non fatal error (or warning).  This method takes a message 
     *  string and an additional object (to be used by specializations 
     *  implemented in subclasses).  Here in the base class a very simple 
     *  implementation is provided which simply prints the message to 
     *  System.err. 
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    @Override
    public void report_error(String message, Object info) {
        System.err.println("ERROR: "+message+" "+info);
    }

    /** This method is called when a syntax error has been detected and recovery 
     *  is about to be invoked.  Here in the base class we just emit a 
     *  "Syntax error" error message.  
     *
     * @param cur_token the current lookahead Symbol.
     */
    @Override
    public void syntax_error(Symbol cur_token) {
      report_error("Syntax error", cur_token);
    }
    /** This method is called if it is determined that syntax error recovery 
     *  has been unsuccessful.  Here in the base class we report a fatal error. 
     *
     * @param cur_token the current lookahead Symbol.
     */
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
      report_fatal_error("Couldn't repair and continue parse", cur_token);
    }

        
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // boolex ::= expr GT expr 
            {
              Tripel<State,State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 =parser.createAssertionEdge(s, succeded, new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GT));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LEQ));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));    
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boolex ::= expr LT expr 
            {
              Tripel<State,State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 =parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LE));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GTQ));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boolex ::= expr LEQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 = parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LEQ));
   a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GT));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolex ::= expr GEQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    s.putAnnotation("__location", lhs.getAnnotation("__location_left")); //TODO: check if correct location
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 = parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GTQ));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LE));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boolex ::= boolex AND boolex 
            {
              Tripel<State,State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tripel<State,State,State> lhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tripel<State,State,State> rhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = lhs.a;
    s.putAnnotation("__location", lhs.getAnnotation("__location_left")); //TODO: check if correct location
    State succeded = parser.createState();
    State failed = parser.createState();
    parser.mergeStates(rhs.a, lhs.b);
    parser.mergeStates(succeded, rhs.b);

    parser.mergeStates(failed, lhs.c);
    parser.mergeStates(failed, rhs.c);
    RESULT = new Tripel<State, State, State>(s, succeded, failed);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolex ::= boolex OR boolex 
            {
              Tripel<State,State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tripel<State,State,State> lhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tripel<State,State,State> rhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = lhs.a;
    s.putAnnotation("__location", lhs.getAnnotation("__location_left")); //TODO: check if correct location
    State succeded = parser.createState();
    State failed = parser.createState();
    parser.mergeStates(succeded, lhs.b);
    parser.mergeStates(succeded, rhs.b);

    parser.mergeStates(rhs.a, lhs.c);
    parser.mergeStates(failed, rhs.c);
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolex ::= expr EQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 =parser.createAssertionEdge(s, succeded, new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.EQ));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.NEQ));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // boolex ::= LPAR boolex RPAR 
            {
              Tripel<State,State,State> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tripel<State,State,State> ex = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // boolex ::= NOT boolex 
            {
              Tripel<State,State,State> RESULT =null;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tripel<State,State,State> rhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

    State swap = rhs.c;
    rhs.c=rhs.b;
    rhs.b=swap;
    RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // boolex ::= expr NEQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 = parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.NEQ));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed, new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.EQ));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= IDENT MULEQ expr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal()); 
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Expression e =new BinaryExpression( parser.obtainExpr(i.getTerminal()), new Operator(Operator.MUL), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", lhs.getAnnotation("__location_right"));
    parser.postfix.put(num, e);
    RESULT = e;
    parser.throwException("*= tmporary not implemented yet");    
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= IDENT DIVEQ expr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal()); 
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Expression e =new BinaryExpression( parser.obtainExpr(i.getTerminal()), new Operator(Operator.DIV), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", lhs.getAnnotation("__location_right"));
    parser.postfix.put(num, e);
    RESULT = e;
    parser.throwException("/= tmporary not implemented yet");    
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= IDENT MINUSEQ expr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal()); 
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Expression e = new BinaryExpression(parser.obtainExpr(i.getTerminal()), new Operator(Operator.MINUS), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", lhs.getAnnotation("__location_right"));
    parser.postfix.put(num, e);
    RESULT = e;
    parser.throwException("-= tmporary not implemented yet");    
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= IDENT PLUSEQ expr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal()); 
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Expression e =new BinaryExpression( parser.obtainExpr(i.getTerminal()), new Operator(Operator.PLUS), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", lhs.getAnnotation("__location_right"));
    parser.postfix.put(num, e);
    RESULT = e;
    parser.throwException("+= tmporary not implemented yet");    
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= DECOP IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal()); 
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Expression e = new BinaryExpression(parser.obtainExpr(i.getTerminal()), new Operator(Operator.MINUS), new IntegerConstant(1));
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    parser.prefix.put(num, e);
    RESULT=e;
    parser.throwException("-- tmporary not implemented yet");    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= INCOP IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Expression e = new BinaryExpression(parser.obtainExpr(i.getTerminal()), new Operator(Operator.PLUS), new IntegerConstant(1));
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    parser.prefix.put(num,e);
    RESULT = e;
    parser.throwException("++ tmporary not implemented yet");    

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= IDENT INCOP 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Expression e = parser.obtainExpr(i.getTerminal());
    Expression ex = new BinaryExpression(e, new Operator(Operator.PLUS), new IntegerConstant(1));
    ex.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    ex.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    parser.postfix.put(num, ex); // new BinaryExpression(e, new Operator(Operator.PLUS), new IntegerConstant(1)));
    RESULT = e;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= IDENT DECOP 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    int num = parser.sym.getId(i.getTerminal());   
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Expression e = parser.obtainExpr(i.getTerminal());
    Expression ex = new BinaryExpression(e, new Operator(Operator.MINUS), new IntegerConstant(1));
    ex.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    ex.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    parser.postfix.put(num, ex); //new BinaryExpression(e, new Operator(Operator.MINUS), new IntegerConstant(1)));
    RESULT = e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr SUBOP expr 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.MINUS), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr DIVOP expr 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.DIV), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr ADDOP expr 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.PLUS), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr MULOP expr 
            {
              Expression RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.MUL), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= LPAR expr RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= SUBOP expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(e, new Operator(Operator.MUL), new IntegerConstant(-1));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= IDENT ASSIGN expr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal());   
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    parser.obtainExpr(i.getTerminal());
    parser.prefix.put(num, t);
    RESULT = t;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= IDENT ASSIGN QUESTIONMARK 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    int num = parser.sym.getId(i.getTerminal());   
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    parser.obtainExpr(i.getTerminal());
    UnknownExpression unknown =  new UnknownExpression();
    parser.prefix.put(num, unknown);
    RESULT = unknown;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= INTCONST 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Terminal<Integer> i = (Terminal<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new IntegerConstant(i.getTerminal());
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 RESULT = parser.obtainExpr(i.getTerminal());
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= CONTINUE NT$16 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$16 ::= 
            {
              Tupel<State,State> RESULT =null;

    State start = parser.createState();
    State end = parser.createState();
    Tupel<State, State> stack = parser.loopStack.peek();
    Transition e = parser.createNullEdge(start, stack.b);
    e.putAnnotation( "__location_left", stack.getAnnotation("__location_right"));
    e.putAnnotation( "__location_right", start.getAnnotation("__location"));
    RESULT = new Tupel<State, State>(start, end);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= BREAK NT$15 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$15 ::= 
            {
              Tupel<State,State> RESULT =null;
  
    State start = parser.createState();
    State end = parser.createState();
    Tupel<State, State> stack = parser.loopStack.peek();
    Transition e = parser.createNullEdge(start, stack.a);
    e.putAnnotation( "__location_left", stack.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", start.getAnnotation("__location"));
    RESULT = new Tupel<State, State>(start, end);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= body 
            {
              Tupel<State,State> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> b = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= RETURN expr NT$14 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$14 ::= 
            {
              Tupel<State,State> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 

    Tupel<State,State> tu = parser.generatePrePostFixes();
    State end = parser.createState();
    end.putAnnotation("__location", tu.getAnnotation("__location_left")); //TODO: check if correct location
    Transition e = parser.createAssignmentEdge(tu.b, end, new Variable(parser.sym.getId("return"),"return"), t);
    e.putAnnotation( "__location_left", t.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", t.getAnnotation("__location_right"));

    tu.b=end;
    RESULT=tu;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= expr NT$13 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$13 ::= 
            {
              Tupel<State,State> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT= parser.generatePrePostFixes();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= IF LPAR boolex NT$12 RPAR statement elseprod 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmt1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmt1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tupel<State,State> stmt1 = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmt2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmt2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> stmt2 = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State cond = parser.createState();
    parser.mergeStates(stmt1.a, b.b);
    parser.mergeStates(stmt2.a, b.c);
    parser.mergeStates(cond, stmt1.b);
    parser.mergeStates(cond, stmt2.b);
    RESULT = new Tupel<State,State>(b.a, cond);
    
    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$12 ::= 
            {
              Tupel<State,State> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
    Tupel<State,State> t = parser.generatePreFixes();
    parser.mergeStates(b.a,t.b);
    b.a=t.a;
    
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    RESULT=null;

    //perceive continue and break point for this loop on top of loopStack
    parser.loopStack.push(new Tupel<State, State>(b.c, b.a));

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= WHILE LPAR boolex NT$11 RPAR statement 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> stmt = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.mergeStates(stmt.a, b.b);
    parser.mergeStates(b.a, stmt.b);
    RESULT = new Tupel<State,State>(b.a, b.c);
    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$11 ::= 
            {
              Tupel<State,State> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    Tupel<State,State> t = parser.generatePreFixes();
    b.a.setLoopSeparator(true);
    parser.mergeStates(b.a,t.b);
    b.a=t.a;
    
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    //perceive continue and break point for this loop on top of loopStack
    parser.loopStack.push(new Tupel<State, State>(b.c, b.a));

 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= NT$10 DO statement WHILE LPAR boolex RPAR SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Tupel<State,State> stmt = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    //  parser.blocknestingdepth--;
    Transition e = parser.createNullEdge(RESULT.b, stmt.a);
    e.putAnnotation( "__location_left", stmt.a.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", RESULT.b.getAnnotation("__location_right"));
    
    b.a.setLoopSeparator(true);
    parser.mergeStates(b.a, stmt.b);
    Tupel<State,State> t = parser.generatePreFixes();
    parser.mergeStates(b.a,t.b);
    b.a=t.a;
    
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    
    Transition e2 = parser.createNullEdge(RESULT.a, b.c);
    e2.putAnnotation( "__location_left", b.c.getAnnotation("__location_left"));
    e2.putAnnotation( "__location_right", RESULT.a.getAnnotation("__location_right"));

    parser.mergeStates(stmt.a, b.b);
    //   RESULT = new Tupel<State,State>(stmt.a, b.c);
    RESULT = new Tupel<State,State>(RESULT.b, RESULT.a);

    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$10 ::= 
            {
              Tupel<State,State> RESULT =null;

    //perceive continue and break point for this loop on top of loopStack
    State endLoop = parser.createState();
    State continueLoop = parser.createState();
    parser.loopStack.push(new Tupel<State, State>(endLoop, continueLoop));
    RESULT = new Tupel<State, State>(endLoop, continueLoop);
//    parser.blocknestingdepth++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= NT$6 FOR LPAR expr NT$7 SEMI boolex NT$8 SEMI expr NT$9 RPAR statement 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> stmt = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    // parser.blocknestingdepth--;
    parser.mergeStates(stmt.a, b.b);
    parser.mergeStates(RESULT.a, stmt.b);
    RESULT = new Tupel<State,State>(b.a, b.c);
    
    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$9 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    Tupel<State,State> t = parser.generatePrePostFixes();
    parser.mergeStates(RESULT.a,t.b);
    RESULT.a = t.a;

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    Tupel<State,State> t = parser.generatePreFixes();
    //System.out.println("Prefix of boolex: "+t);
    parser.mergeStates(t.a, RESULT.b);
    State condBegin = t.a;
    condBegin.putAnnotation("__location", t.getAnnotation("__location_left"));
    
    Transition e = parser.createNullEdge(t.b,b.a);
    e.putAnnotation( "__location_left", b.a.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", t.getAnnotation("__location_right"));
    //parser.mergeStates(b.a, t.b);
    b.a = RESULT.a;
   
    b.a.setLoopSeparator(true);
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    RESULT = new Tupel<State, State>(condBegin, b.c);
    //perceive continue and break point for this loop on top of loopStack
    parser.loopStack.push(new Tupel<State, State>(b.c, b.a));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$7 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT = parser.generatePrePostFixes();
 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Tupel<State,State> RESULT =null;

//    parser.blocknestingdepth++;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= IDENT LPAR RPAR SEMI 
            {
              Tupel<State,State> RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Terminal<String> proc = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    Tupel<State,State> t = parser.generatePreFixes();

    State begin = parser.createState();
    State end = parser.createState();
    Transition e = parser.createMethodCallEdge(begin, end, new petter.cfg.expression.MethodCall(proc.getTerminal(), new ArrayList<Expression>()));
    parser.mergeStates(begin,t.b);
    begin = t.a;
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a,end);
    end= t.b;
    RESULT = new Tupel<State, State>(begin, end);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= IDENT ASSIGN IDENT LPAR RPAR SEMI 
            {
              Tupel<State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Terminal<String> lhs = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Terminal<String> rhs = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    Tupel<State,State> t = parser.generatePreFixes();
    //System.out.println("method call: "+lhs+" = "+rhs+"()"+a);
    int num = parser.sym.getId(lhs.getTerminal());   
    if(num == -1) parser.report_fatal_error("variable not declarated", lhs);
    // int idRhs = parser.sym.getId(rhs.getTerminal());   
    //if(idRhs == -1) parser.report_fatal_error("function not declarated", rhs);

    State begin = parser.createState();
    State end = parser.createState();
    Transition e = parser.createAssignmentEdge(begin, end, new Variable(parser.sym.getId(lhs.getTerminal()), lhs.getTerminal()), new petter.cfg.expression.MethodCall(rhs.getTerminal(), new ArrayList<Expression>()));
    e.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    parser.mergeStates(begin,t.b);
    begin = t.a;
    t = parser.generatePostFixes(true);
    e.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    parser.mergeStates(t.a,end);
    end= t.b;
    RESULT = new Tupel<State, State>(begin, end);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= IDENT ASSIGN IDENT LPAR exprlist RPAR SEMI 
            {
              Tupel<State,State> RESULT =null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Terminal<String> lhs = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Terminal<String> rhs = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AnnotatableList<Expression> l = (AnnotatableList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    State begin = parser.createState();
    State end = parser.createState();
    Tupel<State,State> t = parser.generatePreFixes();
    //System.out.println("method call: "+lhs+" = "+rhs+"( "+l+" )");
    int num = parser.sym.getId(lhs.getTerminal());   
    if(num == -1) parser.report_fatal_error("variable not declarated", lhs);
        
    // int idRhs = parser.sym.getId(rhs.getTerminal());   
    //if(idRhs == -1) parser.report_fatal_error("function not declarated", rhs);
    Expression mc = new petter.cfg.expression.MethodCall(rhs.getTerminal() , l.getList());
    
    Transition e = parser.createAssignmentEdge(begin, end, new Variable(parser.sym.getId(lhs.getTerminal()), lhs.getTerminal()), mc);
    e.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    //System.out.println("assignment annotation: "+e.getAnnotations());
    parser.mergeStates(begin,t.b);
    begin = t.a;
    t = parser.generatePostFixes(true);
    e.putAnnotation( "__location_right", l.getAnnotation("__location_right"));
    parser.mergeStates(t.a,end);
    end= t.b;
    
    RESULT = new Tupel<State, State>(begin, end);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= INT initdeclList NT$5 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AnnotatableList<Tupel<State,State>> list = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Tupel<State,State> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AnnotatableList<Tupel<State,State>> list = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

 State begin = parser.createState();
 State b=list.get(0).a;   
 State end = parser.createState();
 Tupel<State, State> t;
 for(Tupel<State, State> init : list){
     parser.mergeStates(init.a, begin);
     begin = init.b;
     t = parser.generatePostFixes(true);
     parser.mergeStates(t.a, init.b);
     end = t.b;
 } 
  RESULT = new Tupel<State, State>(b, end);
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= HASH PRAGMA IDENT 
            {
              Tupel<State,State> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 State middle = parser.createState(); //als Referenzknoten zum Rücksprung in CFG-View
 middle.putAnnotation("__location", i.getAnnotation("__location_left"));
 middle.putAnnotation("__label", i.getTerminal());
 RESULT = new Tupel<State, State>(middle, middle);
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elseprod ::= 
            {
              Tupel<State,State> RESULT =null;
		 State s = parser.createState(); RESULT =new Tupel<State,State>(s,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseprod",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elseprod ::= ELSE statement 
            {
              Tupel<State,State> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseprod",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statementlist ::= 
            {
              Tupel<State,State> RESULT =null;
		
    State s = parser.createState();
    Tupel<State,State> t = new Tupel<State,State>(s,s);
    RESULT = t;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementlist ::= statement statementlist 
            {
              Tupel<State,State> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tupel<State,State> t = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 parser.mergeStates(l.a, t.b);
 RESULT= new Tupel<State, State>(t.a, l.b);
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exprlist ::= expr 
            {
              AnnotatableList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    AnnotatableList<Expression> list = new AnnotatableList();
    list.add(e);
    RESULT = list;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exprlist ::= expr COMMA exprlist 
            {
              AnnotatableList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AnnotatableList<Expression> l = (AnnotatableList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 l.add2Begin(e);
 RESULT = l;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // initdeclList ::= initdecl 
            {
              AnnotatableList<Tupel<State,State>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> i = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    AnnotatableList<Tupel<State, State>> list = new AnnotatableList();
    list.add(i);
    RESULT = list;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // initdeclList ::= initdecl COMMA initdeclList 
            {
              AnnotatableList<Tupel<State,State>> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tupel<State,State> i = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AnnotatableList<Tupel<State,State>> l = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
 l.add2Begin(i);
 RESULT = l;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // body ::= NT$3 BEGIN statementlist NT$4 END 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = l;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$4 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

          parser.sym.leaveBlock();
          parser.blocknestingdepth--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Tupel<State,State> RESULT =null;
 
	  parser.sym.enterBlock();
          parser.blocknestingdepth++;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procdecl ::= INT IDENT NT$1 LPAR paramlist RPAR BEGIN statementlist NT$2 END 
            {
              Procedure RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Procedure) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procdecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Procedure RESULT =(Procedure) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    List<Integer> locals =  parser.sym.getLocals();
    List<Integer> params = parser.sym.getParameters();
    RESULT = new Procedure(i.getTerminal(),l.a,l.b,locals, params); 
                      parser.sym.leaveBlock();
                      parser.blocknestingdepth--;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Procedure RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

//   System.out.println("function definition of "+i);
			 /* 
			    //TODO: erst bei Typsystem in SymbolTable eintragen
			    try{
	 parser.sym.newLocal(i.getTerminal());
	}catch(Exception e) {
	 parser.report_fatal_error("function has already been declared", i);
	 }*/

	  parser.sym.enterBlock();
                         parser.blocknestingdepth++;
   
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramlist ::= 
            {
              Tupel<State,State> RESULT =null;
		
    State s = parser.createState();
    Tupel<State,State> t = new Tupel<State,State>(s,s);
    RESULT = t;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramlist ::= paramdecl 
            {
              Tupel<State,State> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT= parser.generatePrePostFixes();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramlist ::= paramdecl COMMA paramlist 
            {
              Tupel<State,State> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 State s = parser.createState();
 s.putAnnotation("__location", i.getAnnotation("__location_left")); //TOOD: check if correct location

 Tupel<State, State> t = new Tupel<State,State>(s,s);
 parser.mergeStates(l.a, t.b);
 RESULT= new Tupel<State, State>(t.a, l.b);
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paramdecl ::= INT IDENT ASSIGN expr 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    try{
	int id = parser.sym.newParameter(i.getTerminal());
	parser.obtainExpr(i.getTerminal());
	parser.prefix.put(id, e);
	RESULT = e;
    }catch (Exception ex) {
	parser.report_fatal_error("Parameter "+i+" already declarated", i);
    } 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramdecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paramdecl ::= INT IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 try{
     int id = parser.sym.newParameter(i.getTerminal());
     parser.prefix.put(id, new UnknownExpression());
 }catch (Exception e) {
     parser.report_fatal_error("Parameter "+i+" already declarated", i);
     }
 RESULT = new UnknownExpression();
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramdecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // initdecl ::= IDENT ASSIGN expr 
            {
              Tupel<State,State> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    try{
//	System.out.println("declaration of "+i);
	int id = parser.sym.newLocal(i.getTerminal()); //newParameter
	parser.obtainExpr(i.getTerminal());
	parser.prefix.put(id, e);
	//t=  generatePrefixes(); result = (t.a, t.b)
	RESULT = parser.generatePreFixes();  //e;
    }catch (Exception ex) {
	parser.report_fatal_error("Identifier "+i+" already declarated", i);
    } 
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // initdecl ::= IDENT 
            {
              Tupel<State,State> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 try{
//      System.out.println("declaration of "+i);
     int id = parser.sym.newLocal(i.getTerminal());
     UnknownExpression u = new UnknownExpression();
     u.putAnnotation("__location_left", i.getAnnotation("__location_left"));
     u.putAnnotation("__location_right", i.getAnnotation("__location_right"));
      parser.prefix.put(id, u);
      RESULT = parser.generatePreFixes();
 }catch (Exception e) {
     parser.report_fatal_error("Identifier "+i+" already declarated", i);
 } 
 //TODO:bei declaration generatePostfixes()
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarationlist ::= 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		
    RESULT = new Tupel<List<Integer>,List<Procedure>>(new ArrayList<Integer>(),new ArrayList<Procedure>());

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarationlist ::= declarationlist procdecl 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Procedure d = (Procedure)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 l.b.add(d);
RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarationlist ::= declarationlist INT initdecl NT$0 SEMI 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tupel<List<Integer>,List<Procedure>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tupel<State,State> d = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<State,State> d = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 //l.a.add(d);
 parser.generatePrePostFixes();
 RESULT = l;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= translationunit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CompilationUnit start_val = (CompilationUnit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // translationunit ::= declarationlist 
            {
              CompilationUnit RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Hashtable<String,Procedure> ht = new Hashtable<String,Procedure>();
            for (Procedure m: l.b){
                ht.put(m.getName(),m);
            }

	    CompilationUnit cls = new CompilationUnit(parser.sym.getGlobalSymbolTable(), ht, parser.sym.getGlobals());
	    RESULT = cls;
	    PostProcessVisitor.prettify(cls);
            for (Procedure m: cls){
                m.refreshStates();
            }
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translationunit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

