
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package petter.simplec;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import petter.cfg.*;
import petter.cfg.expression.types.*;
import petter.cfg.expression.*;
import petter.cfg.edges.*;
import petter.utils.Tupel;
import petter.utils.Tripel;
import petter.utils.Terminal;
import petter.utils.AnnotatableList;
import petter.utils.PostProcessVisitor;
import petter.utils.BindingCreator;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\003\000\002\002\004\000\002\023" +
    "\003\000\002\022\003\000\002\022\004\000\002\022\004" +
    "\000\002\022\003\000\002\024\003\000\002\034\002\000" +
    "\002\003\007\000\002\003\004\000\002\003\002\000\002" +
    "\032\003\000\002\032\004\000\002\025\004\000\002\025" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\004" +
    "\000\002\026\003\000\002\026\005\000\002\026\005\000" +
    "\002\026\006\000\002\035\002\000\002\026\007\000\002" +
    "\030\005\000\002\030\005\000\002\030\006\000\002\030" +
    "\004\000\002\030\005\000\002\036\002\000\002\030\007" +
    "\000\002\037\002\000\002\030\006\000\002\040\002\000" +
    "\002\004\005\000\002\033\004\000\002\033\002\000\002" +
    "\021\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\012\005\000\002" +
    "\012\003\000\002\012\002\000\002\041\002\000\002\006" +
    "\010\000\002\042\002\000\002\043\002\000\002\007\007" +
    "\000\002\014\005\000\002\014\003\000\002\013\005\000" +
    "\002\013\003\000\002\011\004\000\002\011\002\000\002" +
    "\010\004\000\002\010\002\000\002\015\005\000\002\044" +
    "\002\000\002\015\006\000\002\045\002\000\002\046\002" +
    "\000\002\047\002\000\002\015\016\000\002\050\002\000" +
    "\002\015\012\000\002\051\002\000\002\015\010\000\002" +
    "\052\002\000\002\015\011\000\002\053\002\000\002\015" +
    "\005\000\002\054\002\000\002\015\006\000\002\015\003" +
    "\000\002\055\002\000\002\015\005\000\002\056\002\000" +
    "\002\015\005\000\002\015\006\000\002\015\005\000\002" +
    "\057\002\000\002\015\010\000\002\015\005\000\002\015" +
    "\005\000\002\017\003\000\002\017\004\000\002\017\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\004\000\002\016\004\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\006\000\002\020\005\000\002\020" +
    "\004\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\024\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\001\002\000\004" +
    "\002\345\001\002\000\024\002\001\004\006\005\010\006" +
    "\016\007\012\010\017\011\007\012\020\013\013\001\002" +
    "\000\016\033\uffd9\037\uffd9\040\uffd9\041\uffd9\051\uffd9\075" +
    "\uffd9\001\002\000\016\033\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\051\uffd5\075\uffd5\001\002\000\016\033\uffda\037\uffda\040" +
    "\uffda\041\uffda\051\uffda\075\uffda\001\002\000\016\033\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\051\uffdb\075\uffdb\001\002\000" +
    "\016\033\uffd7\037\uffd7\040\uffd7\041\uffd7\051\uffd7\075\uffd7" +
    "\001\002\000\016\033\uffd3\037\uffd3\040\uffd3\041\uffd3\051" +
    "\uffd3\075\uffd3\001\002\000\010\037\025\051\022\075\026" +
    "\001\002\000\024\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\001\002\000\016" +
    "\033\uffd8\037\uffd8\040\uffd8\041\uffd8\051\uffd8\075\uffd8\001" +
    "\002\000\016\033\uffd6\037\uffd6\040\uffd6\041\uffd6\051\uffd6" +
    "\075\uffd6\001\002\000\016\033\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\051\uffd4\075\uffd4\001\002\000\004\071\ufff9\001\002" +
    "\000\016\033\ufff5\037\ufff5\040\ufff5\041\ufff5\051\022\075" +
    "\ufff5\001\002\000\012\033\uffdf\035\uffcc\070\uffdf\071\uffdf" +
    "\001\002\000\020\033\ufff2\035\ufff2\037\033\040\ufff2\041" +
    "\032\070\ufff2\071\ufff2\001\002\000\010\037\025\051\022" +
    "\075\026\001\002\000\020\033\uffee\035\uffee\037\uffee\040" +
    "\uffee\041\uffee\070\uffee\071\uffee\001\002\000\006\033\156" +
    "\071\uffc6\001\002\000\006\037\025\075\026\001\002\000" +
    "\020\033\ufff3\035\ufff3\037\033\040\ufff3\041\032\070\ufff3" +
    "\071\ufff3\001\002\000\024\037\057\042\153\043\063\045" +
    "\065\046\061\050\067\051\062\074\066\075\055\001\002" +
    "\000\026\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\033\uffea\040\uffea\001\002\000\026" +
    "\004\006\005\010\006\016\007\012\010\017\011\007\012" +
    "\020\013\013\033\uffcd\040\uffcd\001\002\000\006\033\052" +
    "\040\152\001\002\000\016\033\uffd2\037\042\040\uffd2\041" +
    "\041\051\022\075\026\001\002\000\006\033\uffce\040\uffce" +
    "\001\002\000\014\033\ufff1\037\042\040\ufff1\041\041\075" +
    "\026\001\002\000\024\037\057\042\146\043\063\045\065" +
    "\046\061\050\067\051\062\074\066\075\055\001\002\000" +
    "\036\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\033\uffe1\037\042\040\uffe1\041\041\051" +
    "\022\075\026\001\002\000\006\033\uffd1\040\uffd1\001\002" +
    "\000\006\033\uffd0\040\uffd0\001\002\000\012\033\ufff0\037" +
    "\047\040\ufff0\041\046\001\002\000\024\037\057\042\060" +
    "\043\063\045\065\046\061\050\067\051\062\074\066\075" +
    "\055\001\002\000\026\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\033\uffe3\040\uffe3\001" +
    "\002\000\026\004\006\005\010\006\016\007\012\010\017" +
    "\011\007\012\020\013\013\033\uffcd\040\uffcd\001\002\000" +
    "\006\033\052\040\053\001\002\000\022\004\006\005\010" +
    "\006\016\007\012\010\017\011\007\012\020\013\013\001" +
    "\002\000\012\033\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002" +
    "\000\006\033\uffcf\040\uffcf\001\002\000\064\033\uffa3\037" +
    "\123\040\uffa3\041\uffa3\042\uffa3\045\120\046\124\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\054\uffa3\055\117\056\122\057" +
    "\121\060\116\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\067\uffa3\070\uffa3\071\uffa3\001\002\000\046\033" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\054\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\001\002\000\022" +
    "\037\057\043\063\045\065\046\061\050\067\051\062\074" +
    "\066\075\055\001\002\000\012\033\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\001\002\000\004\075\113\001\002\000\022\037" +
    "\057\043\063\045\065\046\061\050\067\051\062\074\066" +
    "\075\055\001\002\000\022\037\057\043\063\045\065\046" +
    "\061\050\067\051\062\074\066\075\055\001\002\000\020" +
    "\041\071\042\110\047\073\050\072\051\074\052\076\070" +
    "\075\001\002\000\004\075\107\001\002\000\046\033\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\054\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\066\uff9f\067\uff9f\070\uff9f\071\uff9f\001\002\000\022\037" +
    "\057\043\063\045\065\046\061\050\067\051\062\074\066" +
    "\075\055\001\002\000\046\033\uff9b\040\uff9b\041\071\042" +
    "\uff9b\047\073\050\072\051\074\052\076\054\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070" +
    "\uff9b\071\uff9b\001\002\000\022\037\057\043\063\045\065" +
    "\046\061\050\067\051\062\074\066\075\055\001\002\000" +
    "\022\037\057\043\063\045\065\046\061\050\067\051\062" +
    "\074\066\075\055\001\002\000\022\037\057\043\063\045" +
    "\065\046\061\050\067\051\062\074\066\075\055\001\002" +
    "\000\022\037\057\043\063\045\065\046\061\050\067\051" +
    "\062\074\066\075\055\001\002\000\024\037\057\043\063" +
    "\044\100\045\065\046\061\050\067\051\062\074\066\075" +
    "\055\001\002\000\022\037\057\043\063\045\065\046\061" +
    "\050\067\051\062\074\066\075\055\001\002\000\046\033" +
    "\uff97\040\uff97\041\071\042\uff97\047\073\050\072\051\074" +
    "\052\076\054\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\070\uff97\071\uff97\001\002\000\046" +
    "\033\uff9e\040\uff9e\041\uff9e\042\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\054\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\001\002\000" +
    "\046\033\uff9d\040\uff9d\041\071\042\uff9d\047\073\050\072" +
    "\051\074\052\076\054\uff9d\061\uff9d\062\uff9d\063\uff9d\064" +
    "\uff9d\065\uff9d\066\uff9d\067\uff9d\070\075\071\uff9d\001\002" +
    "\000\046\033\uff99\040\uff99\041\071\042\uff99\047\073\050" +
    "\072\051\074\052\076\054\uff99\061\uff99\062\uff99\063\uff99" +
    "\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\001" +
    "\002\000\046\033\uff98\040\uff98\041\071\042\uff98\047\073" +
    "\050\072\051\074\052\076\054\uff98\061\uff98\062\uff98\063" +
    "\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98" +
    "\001\002\000\046\033\uff96\040\uff96\041\071\042\uff96\047" +
    "\073\050\072\051\074\052\076\054\uff96\061\uff96\062\uff96" +
    "\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071" +
    "\uff96\001\002\000\020\041\071\042\106\047\073\050\072" +
    "\051\074\052\076\070\075\001\002\000\046\033\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\054\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\070\uffa1\071\uffa1\001\002\000\046\033\uff93" +
    "\040\uff93\041\uff93\042\uff93\047\uff93\050\uff93\051\uff93\052" +
    "\uff93\054\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93" +
    "\066\uff93\067\uff93\070\uff93\071\uff93\001\002\000\012\033" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\001\002\000\046\033\uff9c" +
    "\040\uff9c\041\071\042\uff9c\047\073\050\072\051\074\052" +
    "\076\054\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\067\uff9c\070\075\071\uff9c\001\002\000\046\033" +
    "\uffa2\040\uffa2\041\071\042\uffa2\047\073\050\072\051\074" +
    "\052\076\054\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\001\002\000\046" +
    "\033\uff92\040\uff92\041\uff92\042\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\054\uff92\061\uff92\062\uff92\063\uff92\064\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\001\002\000" +
    "\020\040\115\041\071\047\073\050\072\051\074\052\076" +
    "\070\075\001\002\000\046\033\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\054\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070" +
    "\uff9a\071\uff9a\001\002\000\022\037\057\043\063\045\065" +
    "\046\061\050\067\051\062\074\066\075\055\001\002\000" +
    "\022\037\057\043\063\045\065\046\061\050\067\051\062" +
    "\074\066\075\055\001\002\000\046\033\uff94\040\uff94\041" +
    "\uff94\042\uff94\047\uff94\050\uff94\051\uff94\052\uff94\054\uff94" +
    "\061\uff94\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067" +
    "\uff94\070\uff94\071\uff94\001\002\000\022\037\057\043\063" +
    "\045\065\046\061\050\067\051\062\074\066\075\055\001" +
    "\002\000\022\037\057\043\063\045\065\046\061\050\067" +
    "\051\062\074\066\075\055\001\002\000\024\037\057\040" +
    "\126\043\063\045\065\046\061\050\067\051\062\074\066" +
    "\075\055\001\002\000\046\033\uff95\040\uff95\041\uff95\042" +
    "\uff95\047\uff95\050\uff95\051\uff95\052\uff95\054\uff95\061\uff95" +
    "\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070" +
    "\uff95\071\uff95\001\002\000\004\040\132\001\002\000\046" +
    "\033\uff8d\040\uff8d\041\uff8d\042\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\054\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\001\002\000" +
    "\022\033\130\040\uffc4\041\071\047\073\050\072\051\074" +
    "\052\076\070\075\001\002\000\022\037\057\043\063\045" +
    "\065\046\061\050\067\051\062\074\066\075\055\001\002" +
    "\000\004\040\uffc5\001\002\000\046\033\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\054\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\001\002\000\046\033\uff90\040\uff90" +
    "\041\071\042\uff90\047\073\050\072\051\074\052\076\054" +
    "\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90" +
    "\067\uff90\070\uff90\071\uff90\001\002\000\046\033\uff8e\040" +
    "\uff8e\041\071\042\uff8e\047\073\050\072\051\074\052\076" +
    "\054\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066" +
    "\uff8e\067\uff8e\070\uff8e\071\uff8e\001\002\000\046\033\uff91" +
    "\040\uff91\041\071\042\uff91\047\073\050\072\051\074\052" +
    "\076\054\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91" +
    "\066\uff91\067\uff91\070\uff91\071\uff91\001\002\000\046\033" +
    "\uff8f\040\uff8f\041\071\042\uff8f\047\073\050\072\051\074" +
    "\052\076\054\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065" +
    "\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\001\002\000\026" +
    "\004\006\005\010\006\016\007\012\010\017\011\007\012" +
    "\020\013\013\033\uffcd\040\uffcd\001\002\000\004\040\143" +
    "\001\002\000\004\040\142\001\002\000\020\033\uffed\035" +
    "\uffed\037\uffed\040\uffed\041\uffed\070\uffed\071\uffed\001\002" +
    "\000\012\033\uffe8\037\uffe8\040\uffe8\041\uffe8\001\002\000" +
    "\006\033\052\040\145\001\002\000\012\033\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\001\002\000\012\033\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\001\002\000\020\041\071\042\150\047\073" +
    "\050\072\051\074\052\076\070\075\001\002\000\012\033" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002\000\012\033\uffef" +
    "\037\047\040\uffef\041\046\001\002\000\020\033\uffe9\035" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\070\uffe9\071\uffe9\001\002" +
    "\000\020\033\uffec\035\uffec\037\uffec\040\uffec\041\uffec\070" +
    "\uffec\071\uffec\001\002\000\020\041\071\042\155\047\073" +
    "\050\072\051\074\052\076\070\075\001\002\000\020\033" +
    "\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\070\uffeb\071\uffeb" +
    "\001\002\000\010\037\025\051\022\075\026\001\002\000" +
    "\010\033\uffdf\070\uffdf\071\uffdf\001\002\000\004\071\uffc7" +
    "\001\002\000\010\033\uffdc\070\163\071\uffdc\001\002\000" +
    "\006\033\uffde\071\uffde\001\002\000\022\037\057\043\063" +
    "\045\065\046\061\050\067\051\062\074\066\075\055\001" +
    "\002\000\022\033\uffdd\041\071\047\073\050\072\051\074" +
    "\052\076\070\075\071\uffdd\001\002\000\004\035\166\001" +
    "\002\000\076\004\006\005\010\006\016\007\012\010\017" +
    "\011\007\012\020\013\013\015\177\016\uffb8\017\172\021" +
    "\170\022\200\023\171\024\203\025\205\026\167\027\202" +
    "\030\204\031\173\035\uffca\036\uffc2\037\057\043\063\045" +
    "\065\046\061\050\067\051\062\074\066\075\201\001\002" +
    "\000\004\074\337\001\002\000\004\020\335\001\002\000" +
    "\004\071\uffab\001\002\000\004\037\320\001\002\000\004" +
    "\037\310\001\002\000\004\016\301\001\002\000\100\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae" +
    "\032\uffae\035\uffae\036\uffae\037\uffae\043\uffae\045\uffae\046" +
    "\uffae\050\uffae\051\uffae\074\uffae\075\uffae\001\002\000\076" +
    "\004\006\005\010\006\016\007\012\010\017\011\007\012" +
    "\020\013\013\015\177\016\uffb8\017\172\021\170\022\200" +
    "\023\171\024\203\025\205\026\167\027\202\030\204\031" +
    "\173\035\uffca\036\uffc2\037\057\043\063\045\065\046\061" +
    "\050\067\051\062\074\066\075\201\001\002\000\022\037" +
    "\057\043\063\045\065\046\061\050\067\051\062\074\066" +
    "\075\055\001\002\000\004\071\uffad\001\002\000\040\034" +
    "\271\037\123\041\uffa3\045\120\046\124\047\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\055\117\056\122\057\121\060\116\070" +
    "\uffa3\071\uffa3\001\002\000\004\037\264\001\002\000\004" +
    "\075\262\001\002\000\004\037\226\001\002\000\004\034" +
    "\224\001\002\000\020\041\071\047\073\050\072\051\074" +
    "\052\076\070\075\071\uffb2\001\002\000\004\036\221\001" +
    "\002\000\004\035\215\001\002\000\010\037\025\051\022" +
    "\075\026\001\002\000\004\071\uffbe\001\002\000\004\071" +
    "\214\001\002\000\100\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\043\uffbd\045\uffbd\046\uffbd\050\uffbd\051\uffbd\074\uffbd" +
    "\075\uffbd\001\002\000\076\004\006\005\010\006\016\007" +
    "\012\010\017\011\007\012\020\013\013\015\177\016\uffb8" +
    "\017\172\021\170\022\200\023\171\024\203\025\205\026" +
    "\167\027\202\030\204\031\173\035\uffca\036\uffc2\037\057" +
    "\043\063\045\065\046\061\050\067\051\062\074\066\075" +
    "\201\001\002\000\004\036\uffc9\001\002\000\004\036\220" +
    "\001\002\000\100\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\043\uffc8\045\uffc8\046\uffc8\050\uffc8\051\uffc8\074\uffc8\075" +
    "\uffc8\001\002\000\024\002\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\001\002\000" +
    "\004\071\223\001\002\000\100\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\043\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1" +
    "\074\uffb1\075\uffb1\001\002\000\074\004\006\005\010\006" +
    "\016\007\012\010\017\011\007\012\020\013\013\015\177" +
    "\016\uffb8\017\172\021\170\022\200\023\171\024\203\025" +
    "\205\026\167\027\202\030\204\031\173\035\uffca\037\057" +
    "\043\063\045\065\046\061\050\067\051\062\074\066\075" +
    "\201\001\002\000\100\004\uffa8\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\043\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\074\uffa8" +
    "\075\uffa8\001\002\000\024\037\227\043\063\045\065\046" +
    "\061\050\067\051\062\053\232\074\066\075\055\001\002" +
    "\000\024\037\227\043\063\045\065\046\061\050\067\051" +
    "\062\053\232\074\066\075\055\001\002\000\010\040\uffb6" +
    "\061\235\062\234\001\002\000\032\041\071\047\073\050" +
    "\072\051\074\052\076\054\241\063\243\064\245\065\240" +
    "\066\244\067\242\070\075\001\002\000\024\037\227\043" +
    "\063\045\065\046\061\050\067\051\062\053\232\074\066" +
    "\075\055\001\002\000\012\040\uff8a\061\235\062\234\071" +
    "\uff8a\001\002\000\024\037\227\043\063\045\065\046\061" +
    "\050\067\051\062\053\232\074\066\075\055\001\002\000" +
    "\024\037\227\043\063\045\065\046\061\050\067\051\062" +
    "\053\232\074\066\075\055\001\002\000\012\040\uff87\061" +
    "\235\062\234\071\uff87\001\002\000\012\040\uff86\061\235" +
    "\062\234\071\uff86\001\002\000\022\037\057\043\063\045" +
    "\065\046\061\050\067\051\062\074\066\075\055\001\002" +
    "\000\022\037\057\043\063\045\065\046\061\050\067\051" +
    "\062\074\066\075\055\001\002\000\022\037\057\043\063" +
    "\045\065\046\061\050\067\051\062\074\066\075\055\001" +
    "\002\000\022\037\057\043\063\045\065\046\061\050\067" +
    "\051\062\074\066\075\055\001\002\000\022\037\057\043" +
    "\063\045\065\046\061\050\067\051\062\074\066\075\055" +
    "\001\002\000\022\037\057\043\063\045\065\046\061\050" +
    "\067\051\062\074\066\075\055\001\002\000\026\040\uff84" +
    "\041\071\047\073\050\072\051\074\052\076\061\uff84\062" +
    "\uff84\070\075\071\uff84\001\002\000\026\040\uff83\041\071" +
    "\047\073\050\072\051\074\052\076\061\uff83\062\uff83\070" +
    "\075\071\uff83\001\002\000\026\040\uff85\041\071\047\073" +
    "\050\072\051\074\052\076\061\uff85\062\uff85\070\075\071" +
    "\uff85\001\002\000\026\040\uff82\041\071\047\073\050\072" +
    "\051\074\052\076\061\uff82\062\uff82\070\075\071\uff82\001" +
    "\002\000\026\040\uff88\041\071\047\073\050\072\051\074" +
    "\052\076\061\uff88\062\uff88\070\075\071\uff88\001\002\000" +
    "\026\040\uff8b\041\071\047\073\050\072\051\074\052\076" +
    "\061\uff8b\062\uff8b\070\075\071\uff8b\001\002\000\004\040" +
    "\255\001\002\000\074\004\006\005\010\006\016\007\012" +
    "\010\017\011\007\012\020\013\013\015\177\016\uffb8\017" +
    "\172\021\170\022\200\023\171\024\203\025\205\026\167" +
    "\027\202\030\204\031\173\035\uffca\037\057\043\063\045" +
    "\065\046\061\050\067\051\062\074\066\075\201\001\002" +
    "\000\100\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\035\uffb5\036\uffb5\037\uffb5\043\uffb5" +
    "\045\uffb5\046\uffb5\050\uffb5\051\uffb5\074\uffb5\075\uffb5\001" +
    "\002\000\010\040\261\061\235\062\234\001\002\000\034" +
    "\040\115\041\071\047\073\050\072\051\074\052\076\054" +
    "\241\063\243\064\245\065\240\066\244\067\242\070\075" +
    "\001\002\000\012\040\uff89\061\uff89\062\uff89\071\uff89\001" +
    "\002\000\004\071\263\001\002\000\100\004\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\035" +
    "\uffa5\036\uffa5\037\uffa5\043\uffa5\045\uffa5\046\uffa5\050\uffa5" +
    "\051\uffa5\074\uffa5\075\uffa5\001\002\000\022\037\057\043" +
    "\063\045\065\046\061\050\067\051\062\074\066\075\055" +
    "\001\002\000\020\040\uffa7\041\071\047\073\050\072\051" +
    "\074\052\076\070\075\001\002\000\004\040\267\001\002" +
    "\000\074\004\006\005\010\006\016\007\012\010\017\011" +
    "\007\012\020\013\013\015\177\016\uffb8\017\172\021\170" +
    "\022\200\023\171\024\203\025\205\026\167\027\202\030" +
    "\204\031\173\035\uffca\037\057\043\063\045\065\046\061" +
    "\050\067\051\062\074\066\075\201\001\002\000\100\004" +
    "\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\035\uffa6\036\uffa6\037\uffa6\043\uffa6\045\uffa6\046" +
    "\uffa6\050\uffa6\051\uffa6\074\uffa6\075\uffa6\001\002\000\074" +
    "\004\006\005\010\006\016\007\012\010\017\011\007\012" +
    "\020\013\013\015\177\016\uffb8\017\172\021\170\022\200" +
    "\023\171\024\203\025\205\026\167\027\202\030\204\031" +
    "\173\035\uffca\037\057\043\063\045\065\046\061\050\067" +
    "\051\062\074\066\075\201\001\002\000\100\004\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4" +
    "\035\uffa4\036\uffa4\037\uffa4\043\uffa4\045\uffa4\046\uffa4\050" +
    "\uffa4\051\uffa4\074\uffa4\075\uffa4\001\002\000\004\071\274" +
    "\001\002\000\100\004\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\015\uffac\016\uffac\017\uffac" +
    "\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\035\uffac\036\uffac\037\uffac" +
    "\043\uffac\045\uffac\046\uffac\050\uffac\051\uffac\074\uffac\075" +
    "\uffac\001\002\000\020\041\071\047\073\050\072\051\074" +
    "\052\076\070\075\071\uffb0\001\002\000\004\071\277\001" +
    "\002\000\100\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\035\uffaf\036\uffaf\037\uffaf\043" +
    "\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\074\uffaf\075\uffaf" +
    "\001\002\000\004\036\uffc3\001\002\000\074\004\006\005" +
    "\010\006\016\007\012\010\017\011\007\012\020\013\013" +
    "\015\177\016\uffb8\017\172\021\170\022\200\023\171\024" +
    "\203\025\205\026\167\027\202\030\204\031\173\035\uffca" +
    "\037\057\043\063\045\065\046\061\050\067\051\062\074" +
    "\066\075\201\001\002\000\004\030\303\001\002\000\004" +
    "\037\304\001\002\000\024\037\227\043\063\045\065\046" +
    "\061\050\067\051\062\053\232\074\066\075\055\001\002" +
    "\000\010\040\306\061\235\062\234\001\002\000\004\071" +
    "\307\001\002\000\100\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\043\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\074\uffb7" +
    "\075\uffb7\001\002\000\024\037\227\043\063\045\065\046" +
    "\061\050\067\051\062\053\232\074\066\075\055\001\002" +
    "\000\010\040\uffb4\061\235\062\234\001\002\000\004\040" +
    "\313\001\002\000\074\004\006\005\010\006\016\007\012" +
    "\010\017\011\007\012\020\013\013\015\177\016\uffb8\017" +
    "\172\021\170\022\200\023\171\024\203\025\205\026\167" +
    "\027\202\030\204\031\173\035\uffca\037\057\043\063\045" +
    "\065\046\061\050\067\051\062\074\066\075\201\001\002" +
    "\000\100\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\316\035\uffc0\036\uffc0\037\uffc0\043\uffc0" +
    "\045\uffc0\046\uffc0\050\uffc0\051\uffc0\074\uffc0\075\uffc0\001" +
    "\002\000\100\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\035\uffb3\036\uffb3\037\uffb3\043" +
    "\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3\074\uffb3\075\uffb3" +
    "\001\002\000\074\004\006\005\010\006\016\007\012\010" +
    "\017\011\007\012\020\013\013\015\177\016\uffb8\017\172" +
    "\021\170\022\200\023\171\024\203\025\205\026\167\027" +
    "\202\030\204\031\173\035\uffca\037\057\043\063\045\065" +
    "\046\061\050\067\051\062\074\066\075\201\001\002\000" +
    "\100\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\035\uffc1\036\uffc1\037\uffc1\043\uffc1\045" +
    "\uffc1\046\uffc1\050\uffc1\051\uffc1\074\uffc1\075\uffc1\001\002" +
    "\000\022\037\057\043\063\045\065\046\061\050\067\051" +
    "\062\074\066\075\055\001\002\000\020\041\071\047\073" +
    "\050\072\051\074\052\076\070\075\071\uffbc\001\002\000" +
    "\004\071\323\001\002\000\024\037\227\043\063\045\065" +
    "\046\061\050\067\051\062\053\232\074\066\075\055\001" +
    "\002\000\010\061\235\062\234\071\uffbb\001\002\000\004" +
    "\071\326\001\002\000\022\037\057\043\063\045\065\046" +
    "\061\050\067\051\062\074\066\075\055\001\002\000\020" +
    "\040\uffba\041\071\047\073\050\072\051\074\052\076\070" +
    "\075\001\002\000\004\040\331\001\002\000\074\004\006" +
    "\005\010\006\016\007\012\010\017\011\007\012\020\013" +
    "\013\015\177\016\uffb8\017\172\021\170\022\200\023\171" +
    "\024\203\025\205\026\167\027\202\030\204\031\173\035" +
    "\uffca\037\057\043\063\045\065\046\061\050\067\051\062" +
    "\074\066\075\201\001\002\000\100\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\043\uffb9\045\uffb9\046\uffb9\050\uffb9\051" +
    "\uffb9\074\uffb9\075\uffb9\001\002\000\004\071\334\001\002" +
    "\000\100\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\035\uffaa\036\uffaa\037\uffaa\043\uffaa" +
    "\045\uffaa\046\uffaa\050\uffaa\051\uffaa\074\uffaa\075\uffaa\001" +
    "\002\000\004\075\336\001\002\000\100\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\043\uffbf\045\uffbf\046\uffbf\050\uffbf" +
    "\051\uffbf\074\uffbf\075\uffbf\001\002\000\004\034\340\001" +
    "\002\000\074\004\006\005\010\006\016\007\012\010\017" +
    "\011\007\012\020\013\013\015\177\016\uffb8\017\172\021" +
    "\170\022\200\023\171\024\203\025\205\026\167\027\202" +
    "\030\204\031\173\035\uffca\037\057\043\063\045\065\046" +
    "\061\050\067\051\062\074\066\075\201\001\002\000\100" +
    "\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\032\uffa9\035\uffa9\036\uffa9\037\uffa9\043\uffa9\045\uffa9" +
    "\046\uffa9\050\uffa9\051\uffa9\074\uffa9\075\uffa9\001\002\000" +
    "\014\033\ufff4\037\ufff4\040\ufff4\041\ufff4\075\ufff4\001\002" +
    "\000\004\071\344\001\002\000\024\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\006\014\021\013\031\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\026" +
    "\014\020\025\022\026\023\032\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\342\001\001\000\004\032\341\001\001\000" +
    "\006\040\160\041\164\001\001\000\002\001\001\000\010" +
    "\025\140\026\023\032\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\030\001\001\000\002\001\001" +
    "\000\006\016\153\017\055\001\001\000\004\035\033\001" +
    "\001\000\012\005\036\012\034\021\035\031\010\001\001" +
    "\000\002\001\001\000\014\025\043\026\023\027\042\030" +
    "\044\032\037\001\001\000\002\001\001\000\006\026\030" +
    "\030\150\001\001\000\006\016\146\017\055\001\001\000" +
    "\016\025\140\026\023\027\137\030\044\032\037\037\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\063\017\055\001\001\000\004\036\047" +
    "\001\001\000\012\005\036\012\050\021\035\031\010\001" +
    "\001\000\002\001\001\000\010\005\053\021\035\031\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\113\017\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\111\017" +
    "\055\001\001\000\006\016\110\017\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\067\017\055\001\001\000\002\001\001\000\006\016\104" +
    "\017\055\001\001\000\006\016\103\017\055\001\001\000" +
    "\006\016\102\017\055\001\001\000\006\016\101\017\055" +
    "\001\001\000\006\016\100\017\055\001\001\000\006\016" +
    "\076\017\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\135\017\055\001\001\000\006\016\134\017" +
    "\055\001\001\000\002\001\001\000\006\016\133\017\055" +
    "\001\001\000\006\016\132\017\055\001\001\000\010\013" +
    "\124\016\126\017\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\130\016\126\017\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\036\012\143\021\035" +
    "\031\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\026\014" +
    "\157\025\156\026\023\032\027\001\001\000\004\040\160" +
    "\001\001\000\002\001\001\000\004\033\161\001\001\000" +
    "\002\001\001\000\006\016\163\017\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\174\011\206\015" +
    "\175\016\205\017\055\021\210\031\010\042\207\050\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\174\011\277\015" +
    "\175\016\205\017\055\021\210\031\010\042\207\050\173" +
    "\001\001\000\006\016\274\017\055\001\001\000\004\055" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\026\014\211\025\156\026\023\032\027\001\001\000" +
    "\004\044\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\174\011\215\015\175\016\205\017\055\021" +
    "\210\031\010\042\207\050\173\001\001\000\004\043\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\174" +
    "\015\224\016\205\017\055\021\210\031\010\042\207\050" +
    "\173\001\001\000\002\001\001\000\010\016\230\017\055" +
    "\020\227\001\001\000\010\016\257\017\055\020\256\001" +
    "\001\000\004\051\253\001\001\000\002\001\001\000\010" +
    "\016\230\017\055\020\232\001\001\000\002\001\001\000" +
    "\010\016\230\017\055\020\236\001\001\000\010\016\230" +
    "\017\055\020\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\252\017\055\001\001\000\006\016\251" +
    "\017\055\001\001\000\006\016\250\017\055\001\001\000" +
    "\006\016\247\017\055\001\001\000\006\016\246\017\055" +
    "\001\001\000\006\016\245\017\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\174\015\255\016\205\017\055\021\210\031\010" +
    "\042\207\050\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\264\017\055\001\001\000" +
    "\004\057\265\001\001\000\002\001\001\000\022\007\174" +
    "\015\267\016\205\017\055\021\210\031\010\042\207\050" +
    "\173\001\001\000\002\001\001\000\022\007\174\015\271" +
    "\016\205\017\055\021\210\031\010\042\207\050\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\174\015\301\016\205" +
    "\017\055\021\210\031\010\042\207\050\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\230\017\055" +
    "\020\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\230\017\055\020\310\001\001" +
    "\000\004\052\311\001\001\000\002\001\001\000\022\007" +
    "\174\015\313\016\205\017\055\021\210\031\010\042\207" +
    "\050\173\001\001\000\004\010\314\001\001\000\002\001" +
    "\001\000\022\007\174\015\316\016\205\017\055\021\210" +
    "\031\010\042\207\050\173\001\001\000\002\001\001\000" +
    "\006\016\320\017\055\001\001\000\004\045\321\001\001" +
    "\000\002\001\001\000\010\016\230\017\055\020\323\001" +
    "\001\000\004\046\324\001\001\000\002\001\001\000\006" +
    "\016\326\017\055\001\001\000\004\047\327\001\001\000" +
    "\002\001\001\000\022\007\174\015\331\016\205\017\055" +
    "\021\210\031\010\042\207\050\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\174\015" +
    "\340\016\205\017\055\021\210\031\010\042\207\050\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

	public static boolean isTypedef(List l){
		for (Object o:l){
			if (o instanceof Integer && ((Integer)o).equals(petter.simplec.sym.TYPEDEF)) return true;
		}
		return false;
	}
	public static Type typeFrom(List l){
		for (Object o:l){
			if (o instanceof Type) return (Type)o;
		}
		return null;
	}	

    petter.utils.SymbolTable sym = new petter.utils.SymbolTable();
    public int blocknestingdepth = 0;
    public Parser(Lexer lex, ComplexSymbolFactory sf) {
        super(lex,sf);
		State initstate = createState();
 		globalinits = new Tupel<>(initstate,initstate);
	try{
	    sym.newLocal("return");
	} catch (Exception e) {System.out.println("variable return could not be created");}
    }

    public Stack<Tripel<Expression,State,State>> switchStack = new Stack<>();
    public Stack<Tupel<State, State>> loopStack = new Stack<>();

    public List<Tupel<Expression, Expression>> prefix  = new LinkedList<>();
    public Hashtable<Expression, Expression> postfix  = new Hashtable<>();

    public void throwException(String s) throws Exception{
	throw new Exception(s);
    }

	public Tupel<String,Type> parambinding(XMLElement e,Type baseType){
		String name = null;
		name=(String)((XMLElement.Terminal)SyntaxTreeXPath.query("//identifier",e).get(0)).value();
		Type t = BindingCreator.extractType(e,baseType);
		return new Tupel<>(name,t);
	}

	public Tupel<String,Type> binding(XMLElement e,Type baseType){
		String name = (String)((XMLElement.Terminal)SyntaxTreeXPath.query("//identifier",e).get(0)).value();
		Type t = BindingCreator.extractType(e,baseType);
		return new Tupel<>(name,t);
	}

    public State createState(){
        State s = new State();
        s.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return s;
    }
    public Transition createAssignmentEdge(State start, State end, Expression lhs, Expression rhs){
        Transition result = TransitionFactory.createAssignment(start, end, lhs, rhs);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Transition createNullEdge(State start, State end){
        Transition result = TransitionFactory.createNop(start, end);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Transition createAssertionEdge(State start, State end, Expression ex, Operator op){
        Transition result = TransitionFactory.createGuard(start, end, ex,op);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Transition createMethodCallEdge(State start, State end, petter.cfg.expression.MethodCall m){
        Transition result = TransitionFactory.createMethodCall(start, end, m);
        result.putAnnotation("__parser_blocknestingdepth",blocknestingdepth);
        return result;
    }
    public Expression obtainExpr(String i) throws Exception{
	int num = sym.getId(i); 
        Type t = sym.getType(i);
	if (num==-1) throw new Exception("Identifier "+i+" never declared");
        final Variable var;
        Expression result;
        result= var = new Variable(num, i, t);
        for (Tupel<Expression,Expression> e : prefix) {
            if (e.a.equals(var)) result =e.b;
        }
        return result;
    }

    public Tupel<State,State> generatePrePostFixes(){
        State superStart;
        State start = createState();
        superStart = start;
	Tupel<State, State> prefix = generatePreFixes();
	Tupel<State, State> postfix =generatePostFixes(true);
	mergeStates(postfix.a, prefix.b);
        return new Tupel<State, State>(prefix.a, postfix.b);

    }
  private static Type retType(Type t){ 
    if (t instanceof Function) return ((Function)t).getReturnType();
    return ((Function)(((PointerTo)t).getInner())).getReturnType();
  }
  public Tupel<State,State> generatePreFixes(){
        State superStart, start;
        superStart = start = createState();
        for(Tupel<Expression,Expression> t : prefix){
            State connect = createState();
            Transition e;
            Type tbtype = t.b.getType();
            if ((t.b instanceof petter.cfg.expression.MethodCall)&&(retType(tbtype).equals(petter.cfg.expression.types.Void.create())))   
               e = createMethodCallEdge(start, connect, (petter.cfg.expression.MethodCall)t.b);
            else  
               e = createAssignmentEdge(start, connect, t.a, t.b);
	    e.putAnnotation( "__location_left", t.b.getAnnotation("__location_left"));
	    e.putAnnotation( "__location_right", t.b.getAnnotation("__location_right"));
	    start.putAnnotation("__location", e.getAnnotation("__location_left"));
	    connect.putAnnotation("__location", e.getAnnotation("__location_right"));
	    start = connect;
	   
        }
        prefix.clear();
	return new Tupel<State, State>(superStart, start);

    }

 public Tupel<State,State> generatePostFixes(boolean clear){
        State superStart;
        State start = createState();
        superStart = start;
	for(Expression i : postfix.keySet()){
            State connect = createState();
            Transition e = createAssignmentEdge(start, connect, i, postfix.get(i));
	    e.putAnnotation( "__location_left", postfix.get(i).getAnnotation("__location_left"));
	    e.putAnnotation( "__location_right", postfix.get(i).getAnnotation("__location_right"));
	    //System.out.println("annotion of assign edge: "+e.getAnnotations());
	    start.putAnnotation("__location", e.getAnnotation("__location_left"));
	    connect.putAnnotation("__location", e.getAnnotation("__location_right"));
            start = connect;
        } 
        if (clear) postfix.clear();
        return new Tupel<State, State>(superStart, start);

    }




    public  void mergeStates(State news, State old){
	Iterator<Transition> iter = old.getInIterator();
	if(!iter.hasNext()) 
	{Transition e = createNullEdge(old, news); 
	e.putAnnotation( "__location_left", news.getAnnotation("__location"));
	e.putAnnotation( "__location_right", old.getAnnotation("__location"));
	if(old.isLoopSeparator()) news.setLoopSeparator(true);
	if(old.getAnnotation("__label") != null) news.putAnnotation("__label", old.getAnnotation("__label"));
	return; }
	
	while(iter.hasNext()){
	    Transition e = iter.next();
	    if(news.getAnnotation("__location") == null){
		news.putAnnotation("__location", old.getAnnotation("__location"));
	    }
	    if(old.getAnnotation("__location") == null){
		old.putAnnotation("__location", news.getAnnotation("__location"));
	    }
	    e.setDest(news);
        }
    }

	Tupel<State,State> globalinits;
	List<State> returns;
	public void resetReturns(){
		returns=new LinkedList<State>();
	}
	public void addReturn(State s){
		returns.add(s);
	}
	public Iterable<State> currentReturns(){
		return returns;
	}
    /** Report a fatal error.  This method takes a  message string and an 
     *  additional object (to be used by specializations implemented in 
     *  subclasses).  Here in the base class a very simple implementation 
     *  is provided which reports the error then throws an exception. 
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    @Override
    public void report_fatal_error(String message, Object   info) throws Exception {
        System.err.println("FATAL: "+message+" "+info);
        throw new Exception("in Simple C Compiler:\n  "+ message+ "\n  occured at "+info);
    }
    /** Report a non fatal error (or warning).  This method takes a message 
     *  string and an additional object (to be used by specializations 
     *  implemented in subclasses).  Here in the base class a very simple 
     *  implementation is provided which simply prints the message to 
     *  System.err. 
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    @Override
    public void report_error(String message, Object info) {
        System.err.println("ERROR: "+message+" "+info);
    }

    /** This method is called when a syntax error has been detected and recovery 
     *  is about to be invoked.  Here in the base class we just emit a 
     *  "Syntax error" error message.  
     *
     * @param cur_token the current lookahead Symbol.
     */
    @Override
    public void syntax_error(Symbol cur_token) {
      report_error("Syntax error", cur_token);
      report_expected_token_ids();
    }
    /** This method is called if it is determined that syntax error recovery 
     *  has been unsuccessful.  Here in the base class we report a fatal error. 
     *
     * @param cur_token the current lookahead Symbol.
     */
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
      report_fatal_error("Couldn't repair and continue parse", cur_token);
      //report_expected_token_ids();
    }

        

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // translationunit ::= declarationlist 
            {
              CompilationUnit RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Hashtable<String,Procedure> ht = new Hashtable<String,Procedure>();
            for (Procedure m: l.b){
                ht.put(m.getName(),m);
            }
		parser.sym.enterBlock();
		parser.blocknestingdepth++;
		parser.resetReturns();


		State newend = parser.createState();
		int tmpid = parser.sym.newTemporary(Int.create());
    	Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),Int.create());
		parser.createAssignmentEdge(parser.globalinits.b,newend,tmp,new petter.cfg.expression.MethodCall("main",null,new LinkedList<>()));
		Procedure init = new Procedure("$init",parser.globalinits.a,newend,new LinkedList<>(),new LinkedList<>());
		ht.put(init.getName(),init);
	    
    	parser.sym.leaveBlock();
    	parser.blocknestingdepth--;

		CompilationUnit cls = new CompilationUnit(parser.sym.getGlobalSymbolTable(), ht, parser.sym.getGlobals());
	    RESULT = cls;
	    PostProcessVisitor.prettify(cls);
            for (Procedure m: cls){
                m.refreshStates();
            }
	    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translationunit",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= translationunit EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		CompilationUnit start_val = (CompilationUnit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dspec ::= declspec 
            {
              List RESULT =null;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List ds = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	RESULT = ds; 
    parser.sym.setLastParsedType(typeFrom(ds));
    isTypedef(ds);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dspec",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declspec ::= type 
            {
              List RESULT =null;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new LinkedList();RESULT.add(typ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declspec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declspec ::= type declspec 
            {
              List RESULT =null;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List ds = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=ds;RESULT.add(typ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declspec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declspec ::= storageclassspec declspec 
            {
              List RESULT =null;
		Location scsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location scsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer scs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List ds = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=ds;RESULT.add(scs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declspec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declspec ::= storageclassspec 
            {
              List RESULT =null;
		Location scsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location scsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer scs = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new LinkedList(); RESULT.add(scs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declspec",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // storageclassspec ::= TYPEDEF 
            {
              Integer RESULT =null;
		 RESULT= new Integer(petter.simplec.sym.TYPEDEF); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageclassspec",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AnnotatableList<Tupel<State,State>> il = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

	State begin=parser.globalinits.b;
	State end=begin;
 	for(Tupel<State, State> init : il){
        parser.mergeStates(init.a, begin);
     	begin = init.b;
     	Tupel<State,State> t = parser.generatePostFixes(true);
     	parser.mergeStates(t.a, init.b);
     	end = t.b;
 	}
	parser.globalinits = new Tupel<State, State>(parser.globalinits.a, end);
	RESULT = l;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarationlist ::= declarationlist type initdeclList NT$0 SEMI 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tupel<List<Integer>,List<Procedure>>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AnnotatableList<Tupel<State,State>> il = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarationlist ::= declarationlist procdecl 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tupel<List<Integer>,List<Procedure>> l = (Tupel<List<Integer>,List<Procedure>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Procedure d = (Procedure)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  if (d!=null)
        l.b.add(d);
RESULT = l;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarationlist ::= 
            {
              Tupel<List<Integer>,List<Procedure>> RESULT =null;
		
    RESULT = new Tupel<List<Integer>,List<Procedure>>(new ArrayList<Integer>(),new ArrayList<Procedure>());

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationlist",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pointer ::= MULOP 
            {
              Integer RESULT =null;
		 RESULT =1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pointer ::= MULOP pointer 
            {
              Integer RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= i+1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarator ::= pointer direct_declarator 
            {
              XMLElement RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new XMLElement.NonTerminal("pointer",0,new XMLElement.Terminal(pxleft,"count",p,pxright),dd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarator ::= direct_declarator 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // abstract_declarator ::= pointer 
            {
              XMLElement RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new XMLElement.NonTerminal("pointer",0,new XMLElement.Terminal(pxleft,"count",p,pxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // abstract_declarator ::= direct_abstract_declarator 
            {
              XMLElement RESULT =null;
		Location dadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement dad = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dad; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // abstract_declarator ::= pointer direct_abstract_declarator 
            {
              XMLElement RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new XMLElement.NonTerminal("pointer",0,new XMLElement.Terminal(pxleft,"count",p,pxright),d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstract_declarator",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // direct_declarator ::= IDENT 
            {
              XMLElement RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new XMLElement.Terminal(ixleft,"identifier",i.getTerminal(),ixright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // direct_declarator ::= LPAR declarator RPAR 
            {
              XMLElement RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // direct_declarator ::= direct_declarator LSQ RSQ 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new XMLElement.NonTerminal("array",0,dd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // direct_declarator ::= direct_declarator LSQ expr RSQ 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new XMLElement.NonTerminal("array",1,dd,new XMLElement.Terminal(exleft,"index",e,exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 
	parser.sym.enterBlock();
    parser.blocknestingdepth++;
	parser.resetReturns();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // direct_declarator ::= direct_declarator LPAR NT$1 paramlist RPAR 
            {
              XMLElement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (XMLElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Type> p = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
	parser.sym.leaveBlock();
    parser.blocknestingdepth--;
	RESULT=new XMLElement.NonTerminal("function",0,dd,new XMLElement.Terminal(pxleft,"params",p,pxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_declarator",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // direct_abstract_declarator ::= LPAR abstract_declarator RPAR 
            {
              XMLElement RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // direct_abstract_declarator ::= direct_abstract_declarator LSQ RSQ 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT=new XMLElement.NonTerminal("array",0,dd); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // direct_abstract_declarator ::= direct_abstract_declarator LSQ expr RSQ 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new XMLElement.NonTerminal("array",1,dd,new XMLElement.Terminal(exleft,"index",e,exright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // direct_abstract_declarator ::= LSQ RSQ 
            {
              XMLElement RESULT =null;
		 RESULT=new XMLElement.NonTerminal("array",2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // direct_abstract_declarator ::= LSQ expr RSQ 
            {
              XMLElement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=new XMLElement.NonTerminal("array",3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$2 ::= 
            {
              XMLElement RESULT =null;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

    parser.sym.enterBlock();
    parser.blocknestingdepth++;
	parser.resetReturns();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // direct_abstract_declarator ::= direct_abstract_declarator LPAR NT$2 paramlist RPAR 
            {
              XMLElement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (XMLElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location ddxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location ddxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		XMLElement dd = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Type> p = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    parser.sym.leaveBlock();
    parser.blocknestingdepth--;
	RESULT=new XMLElement.NonTerminal("function",0,dd,new XMLElement.Terminal(pxleft,"params",p,pxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              XMLElement RESULT =null;

	parser.sym.enterBlock();
    parser.blocknestingdepth++;
	parser.resetReturns();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // direct_abstract_declarator ::= LPAR NT$3 paramlist RPAR 
            {
              XMLElement RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (XMLElement) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Type> p = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		     
	parser.sym.leaveBlock();
    parser.blocknestingdepth--;
	RESULT=new XMLElement.NonTerminal("function",1,new XMLElement.Terminal(pxleft,"params",p,pxright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direct_abstract_declarator",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$4 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

	Type baseType = parser.sym.getLastParsedType();
	Tupel<String,Type> binding = parser.binding(d,baseType);
    try {
		parser.sym.setLastParsedType(binding.b);
		int id = parser.sym.newLocal(binding.a);
		Variable var = new Variable(id,binding.a,binding.b);
     	UnknownExpression u = new UnknownExpression(binding.b);
		//u.putAnnotation("__location_left", i.getAnnotation("__location_left"));
     	//u.putAnnotation("__location_right", i.getAnnotation("__location_right"));
		parser.prefix.add(Tupel.create(var, u));
     	RESULT = parser.generatePreFixes();
		parser.sym.setLastParsedType(baseType);
	}catch (Exception ex){
		ex.printStackTrace();
		parser.report_fatal_error("Identifier "+binding.a+" already declared!",binding.a);
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // initdecl ::= declarator NT$4 assign_opt 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression o = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	if (o!=null){
		Type baseType = parser.sym.getLastParsedType();
		Tupel<String,Type> binding = parser.binding(d,baseType);
		int num = parser.sym.getId(binding.a);   
		Variable var = new Variable(num,binding.a,binding.b);
		parser.prefix.add(Tupel.create(var,o));
		RESULT=parser.generatePreFixes();
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assign_opt ::= ASSIGN expr 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_opt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assign_opt ::= 
            {
              Expression RESULT =null;
		
RESULT=null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_opt",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= typename 
            {
              Type RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
                      parser.sym.setLastParsedType(RESULT);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // typename ::= VOID 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Void.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typename ::= INT 
            {
              Type RESULT =null;
		 RESULT = Int.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typename ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = Char.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // typename ::= DOUBLE 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Double.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // typename ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Float.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // typename ::= LONG 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Long.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // typename ::= SHORT 
            {
              Type RESULT =null;
		 RESULT = petter.cfg.expression.types.Short.create(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // typename ::= TYPE_NAME 
            {
              Type RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<Type> t = (Terminal<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t.getTerminal(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typename",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paramdecl ::= type 
            {
              Type RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramdecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // paramdecl ::= type abstract_declarator 
            {
              Type RESULT =null;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Tupel<String,Type> binding = parser.parambinding(d,typ);
 RESULT=binding.b;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramdecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paramdecl ::= type declarator 
            {
              Type RESULT =null;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Tupel<String,Type> binding = parser.parambinding(d,typ);
 RESULT=binding.b;
 if (binding.a!=null){
 	try{
     	int id = parser.sym.newParameter(binding.a,binding.b);
 	}catch (Exception e) {
		e.printStackTrace();
     	parser.report_fatal_error("Parameter "+binding.a+" already declared", binding.a);
    }
  }
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramdecl",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramlist ::= paramlist COMMA paramdecl 
            {
              List<Type> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<Type> l = (List<Type>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type d = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l; RESULT.add(d);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // paramlist ::= paramdecl 
            {
              List<Type> RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Type d = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Type>(); RESULT.add(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramlist ::= 
            {
              List<Type> RESULT =null;
		 RESULT = new LinkedList<Type>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramlist",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$5 ::= 
            {
              Procedure RESULT =null;
		Location baseTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location baseTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type baseType = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
	Tupel<String,Type> binding = parser.binding(d,baseType);
    try {
		parser.sym.setLastParsedType(binding.b);
	    // TODO: Check type refinement for function prototypes!!!
		if (parser.sym.getType(binding.a)==null)
        	parser.sym.newLocal(binding.a);
		parser.sym.setLastParsedType(baseType);
	}catch (Exception ex){
		ex.printStackTrace();
		parser.report_fatal_error("Identifier "+binding.a+" already declared!",binding.a);
	}
	parser.sym.undoLeave();
    parser.blocknestingdepth++;
	parser.sym.setLastParsedType(binding.b);
	if (parser.sym.getType(binding.a)==null)
        	parser.sym.newLocal(binding.a);
	parser.sym.setLastParsedType(baseType);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // procdecl ::= type declarator NT$5 BEGIN statementlist END 
            {
              Procedure RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Procedure) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location baseTypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location baseTypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Type baseType = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		XMLElement d = (XMLElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	Tupel<String,Type> binding = parser.binding(d,baseType);
    List<Integer> locals =  parser.sym.getLocals();
	//TODO: Parameters need to be extracted from declarator!!!!
    List<Integer> params = parser.sym.getParameters();
    List<Type> list = (List<Type>)(((Function)binding.b).parameter());
    for(Integer p : params) list.add(parser.sym.getType(p));
    State newret = parser.createState();
	parser.createNullEdge(l.b,newret);
	for (State r: parser.currentReturns()){
		parser.createNullEdge(r,newret);
	} 

    RESULT = new Procedure(binding.a,l.a,newret,locals, params); 

    parser.sym.leaveBlock();
    parser.blocknestingdepth--;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procdecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$6 ::= 
            {
              Tupel<State,State> RESULT =null;
 
	  parser.sym.enterBlock();
          parser.blocknestingdepth++;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$7 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

          parser.sym.leaveBlock();
          parser.blocknestingdepth--;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // body ::= NT$6 BEGIN statementlist NT$7 END 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = l;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // initdeclList ::= initdecl COMMA initdeclList 
            {
              AnnotatableList<Tupel<State,State>> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tupel<State,State> i = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AnnotatableList<Tupel<State,State>> l = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
 l.add2Begin(i);
 RESULT = l;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // initdeclList ::= initdecl 
            {
              AnnotatableList<Tupel<State,State>> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> i = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    AnnotatableList<Tupel<State, State>> list = new AnnotatableList();
    list.add(i);
    RESULT = list;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initdeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprlist ::= expr COMMA exprlist 
            {
              AnnotatableList<Expression> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AnnotatableList<Expression> l = (AnnotatableList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 l.add2Begin(e);
 RESULT = l;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprlist ::= expr 
            {
              AnnotatableList<Expression> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    AnnotatableList<Expression> list = new AnnotatableList();
    list.add(e);
    RESULT = list;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statementlist ::= statement statementlist 
            {
              Tupel<State,State> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tupel<State,State> t = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> l = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 parser.mergeStates(l.a, t.b);
 RESULT= new Tupel<State, State>(t.a, l.b);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statementlist ::= 
            {
              Tupel<State,State> RESULT =null;
		
    State s = parser.createState();
    Tupel<State,State> t = new Tupel<State,State>(s,s);
    RESULT = t;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementlist",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // elseprod ::= ELSE statement 
            {
              Tupel<State,State> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseprod",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elseprod ::= 
            {
              Tupel<State,State> RESULT =null;
		 State s = parser.createState(); RESULT =new Tupel<State,State>(s,s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseprod",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= HASH PRAGMA IDENT 
            {
              Tupel<State,State> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 State middle = parser.createState(); //als Referenzknoten zum Rücksprung in CFG-View
 middle.putAnnotation("__location", i.getAnnotation("__location_left"));
 middle.putAnnotation("__label", i.getTerminal());
 RESULT = new Tupel<State, State>(middle, middle);
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$8 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		AnnotatableList<Tupel<State,State>> list = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

 State begin = parser.createState();
 State b=list.get(0).a;   
 State end = parser.createState();
 Tupel<State, State> t;
 for(Tupel<State, State> init : list){
     parser.mergeStates(init.a, begin);
     begin = init.b;
     t = parser.generatePostFixes(true);
     parser.mergeStates(t.a, init.b);
     end = t.b;
 } 
 RESULT = new Tupel<State, State>(b, end);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= type initdeclList NT$8 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location typxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location typxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Type typ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location listxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location listxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		AnnotatableList<Tupel<State,State>> list = (AnnotatableList<Tupel<State,State>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$9 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT = parser.generatePrePostFixes();
 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$10 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    Tupel<State,State> t = parser.generatePreFixes();
    //System.out.println("Prefix of boolex: "+t);
    parser.mergeStates(t.a, RESULT.b);
    State condBegin = t.a;
    condBegin.putAnnotation("__location", t.getAnnotation("__location_left"));
    
    Transition e = parser.createNullEdge(t.b,b.a);
    e.putAnnotation( "__location_left", b.a.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", t.getAnnotation("__location_right"));
    //parser.mergeStates(b.a, t.b);
    b.a = RESULT.a;
   
	condBegin.setLoopSeparator(true);
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    RESULT = new Tupel<State, State>(condBegin, b.c);
    //perceive continue and break point for this loop on top of loopStack
    parser.loopStack.push(new Tupel<State, State>(b.c, b.a));
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$11 ::= 
            {
              Tupel<State,State> RESULT =(Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    Tupel<State,State> t = parser.generatePrePostFixes();
    parser.mergeStates(RESULT.a,t.b);
    RESULT.a = t.a;

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= FOR LPAR expr NT$9 SEMI boolex NT$10 SEMI expr NT$11 RPAR statement 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> stmt = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    // parser.blocknestingdepth--;
    parser.mergeStates(stmt.a, b.b);
    parser.mergeStates(RESULT.a, stmt.b);
    RESULT = new Tupel<State,State>(b.a, b.c);
    
    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$12 ::= 
            {
              Tupel<State,State> RESULT =null;

    //perceive continue and break point for this loop on top of loopStack
    State endLoop = parser.createState();
    State continueLoop = parser.createState();
    parser.loopStack.push(new Tupel<State, State>(endLoop, continueLoop));
    RESULT = new Tupel<State, State>(endLoop, continueLoop);
//    parser.blocknestingdepth++;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= NT$12 DO statement WHILE LPAR boolex RPAR SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Tupel<State,State> stmt = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    //  parser.blocknestingdepth--;
    Transition e = parser.createNullEdge(RESULT.b, stmt.a);
    e.putAnnotation( "__location_left", stmt.a.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", RESULT.b.getAnnotation("__location_right"));
    
    b.a.setLoopSeparator(true);
    parser.mergeStates(b.a, stmt.b);
    Tupel<State,State> t = parser.generatePreFixes();
    parser.mergeStates(b.a,t.b);
    b.a=t.a;
    
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);

    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    
    Transition e2 = parser.createNullEdge(b.c,RESULT.a);
    e2.putAnnotation( "__location_left", b.c.getAnnotation("__location_left"));
    e2.putAnnotation( "__location_right", RESULT.a.getAnnotation("__location_right"));

    parser.mergeStates(stmt.a, b.b);
    //   RESULT = new Tupel<State,State>(stmt.a, b.c);
    RESULT = new Tupel<State,State>(RESULT.b, RESULT.a);

    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$13 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    Tupel<State,State> t = parser.generatePreFixes();
    b.a.setLoopSeparator(true);
    parser.mergeStates(b.a,t.b);
    b.a=t.a;
    
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    //perceive continue and break point for this loop on top of loopStack
    parser.loopStack.push(new Tupel<State, State>(b.c, b.a));

 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= WHILE LPAR boolex NT$13 RPAR statement 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location stmtxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmtxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> stmt = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.mergeStates(stmt.a, b.b);
    parser.mergeStates(b.a, stmt.b);
    RESULT = new Tupel<State,State>(b.a, b.c);
    //when finished loop remove continue/break point tupel from loopStack
    parser.loopStack.pop();
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$14 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
    Tupel<State,State> t = parser.generatePreFixes();
    parser.mergeStates(b.a,t.b);
    b.a=t.a;
    
    t = parser.generatePostFixes(false);
    parser.mergeStates(t.a, b.b);
    b.b=t.b; //succeded
    t = parser.generatePostFixes(true);
    parser.mergeStates(t.a, b.c);
    b.c=t.b; //failed
    RESULT=null;


        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= IF LPAR boolex NT$14 RPAR statement elseprod 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Tripel<State,State,State> b = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location stmt1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location stmt1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tupel<State,State> stmt1 = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location stmt2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location stmt2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> stmt2 = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State cond = parser.createState();
    parser.mergeStates(stmt1.a, b.b);
    parser.mergeStates(stmt2.a, b.c);
    parser.mergeStates(cond, stmt1.b);
    parser.mergeStates(cond, stmt2.b);
    RESULT = new Tupel<State,State>(b.a, cond);
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$15 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

    RESULT= parser.generatePrePostFixes();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= expr NT$15 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$16 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 

    Tupel<State,State> tu = parser.generatePrePostFixes();
    State end = parser.createState();
    end.putAnnotation("__location", tu.getAnnotation("__location_left")); //TODO: check if correct location
    Transition e = parser.createAssignmentEdge(tu.b, end, new Variable(parser.sym.getId("return"),"return",null), t);
    e.putAnnotation( "__location_left", t.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", t.getAnnotation("__location_right"));
	parser.addReturn(end);
    tu.b=parser.createState();
    RESULT=tu;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement ::= RETURN expr NT$16 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // statement ::= body 
            {
              Tupel<State,State> RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> b = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$17 ::= 
            {
              Tupel<State,State> RESULT =null;
  
    State start = parser.createState();
    State end = parser.createState();
    Tupel<State, State> stack = parser.loopStack.peek();
    Transition e = parser.createNullEdge(start, stack.a);
    e.putAnnotation( "__location_left", stack.getAnnotation("__location_left"));
    e.putAnnotation( "__location_right", start.getAnnotation("__location"));
    RESULT = new Tupel<State, State>(start, end);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= BREAK NT$17 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$18 ::= 
            {
              Tupel<State,State> RESULT =null;

    State start = parser.createState();
    State end = parser.createState();
    Tupel<State, State> stack = parser.loopStack.peek();
    Transition e = parser.createNullEdge(start, stack.b);
    e.putAnnotation( "__location_left", stack.getAnnotation("__location_right"));
    e.putAnnotation( "__location_right", start.getAnnotation("__location"));
    RESULT = new Tupel<State, State>(start, end);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= CONTINUE NT$18 SEMI 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // statement ::= CASE INTCONST COLON statement 
            {
              Tupel<State,State> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<Integer> i = (Terminal<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Expression guard = new BinaryExpression( new IntegerConstant(i.getTerminal()), new Operator(Operator.MINUS), parser.switchStack.peek().a);
    parser.createAssertionEdge(parser.switchStack.peek().b, s.a, guard, new Operator(Operator.EQ));
    State newcont = parser.createState();
    parser.createAssertionEdge(parser.switchStack.peek().b, newcont, guard, new Operator(Operator.NEQ));
    parser.switchStack.peek().b=newcont;
    RESULT=s;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // statement ::= DEFAULT COLON statement 
            {
              Tupel<State,State> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    parser.createNullEdge(parser.switchStack.peek().c,s.a);
    RESULT=s;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$19 ::= 
            {
              Tupel<State,State> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 
    State start = parser.createState();
    State end = parser.createState();
    State defaul = parser.createState();
    parser.switchStack.push(Tripel.create(e,start,defaul)); 
    State cont=null;
    if (!parser.loopStack.isEmpty()) cont = parser.loopStack.peek().b;
    parser.loopStack.push(Tupel.create(end,cont));
    RESULT = Tupel.create(start,end);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement ::= SWITCH LPAR expr NT$19 RPAR statement 
            {
              Tupel<State,State> RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Tupel<State,State>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	State st = parser.switchStack.peek().c;
    parser.createNullEdge(parser.switchStack.peek().b,parser.switchStack.peek().c);
	if (st.getOutDegree()==0) parser.createNullEdge(st,s.b);
    State start = parser.switchStack.pop().b;
    State breaks = parser.loopStack.pop().a;
    parser.createNullEdge(breaks, s.b);
    RESULT=Tupel.create(RESULT.a,s.b);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // statement ::= GOTO IDENT SEMI 
            {
              Tupel<State,State> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
   State source = parser.createState();
    //TODO: actual goto implementation
   State dest = parser.sym.getStateForLabel(i.getTerminal());
   if (dest!=null) {
        parser.createNullEdge(source,dest);
   }
   else parser.sym.registerGoto(i.getTerminal(),source);
   RESULT=Tupel.create(source,parser.createState());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // statement ::= IDENT COLON statement 
            {
              Tupel<State,State> RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tupel<State,State> s = (Tupel<State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    try{
    parser.sym.enterLabel(i.getTerminal(),s.a);
    } catch (Exception e){
        parser.report_error("Label "+i.getTerminal()+" already declarated",i);
    }
    RESULT=s;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lhsexpression ::= IDENT 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		    
    int num = parser.sym.getId(i.getTerminal());   
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    RESULT = parser.obtainExpr(i.getTerminal());  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lhsexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lhsexpression ::= MULOP expr 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new UnaryExpression(e,new Operator(Operator.DEREF));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lhsexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lhsexpression ::= expr LSQ expr RSQ 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new BinaryExpression(lhs,new Operator(Operator.ARRAY),rhs);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lhsexpression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= lhsexpression 
            {
              Expression RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = l;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= INTCONST 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<Integer> i = (Terminal<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new IntegerConstant(i.getTerminal()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= expr ASSIGN QUESTIONMARK 
            {
              Expression RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    UnknownExpression unknown =  new UnknownExpression(l.getType());
    parser.prefix.add(Tupel.create(l, unknown));
    RESULT = unknown;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= expr ASSIGN expr 
            {
              Expression RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Type typ = l.getType();
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(l,ex));
    parser.prefix.add(Tupel.create(tmp,l));
    RESULT = tmp;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= ADDOFOP expr 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new UnaryExpression(e,new Operator(Operator.ADDRESSOF));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= SUBOP expr 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(e, new Operator(Operator.MUL), new IntegerConstant(-1));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= LPAR expr RPAR 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = e;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= expr MULOP expr 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.MUL), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= expr ADDOP expr 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.PLUS), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr ::= expr DIVOP expr 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.DIV), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr ::= expr SUBOP expr 
            {
              Expression RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new BinaryExpression(lhs, new Operator(Operator.MINUS), rhs);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr ::= IDENT DECOP 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    int num = parser.sym.getId(i.getTerminal());   
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression ex = new BinaryExpression(v, new Operator(Operator.MINUS), new IntegerConstant(1));
    ex.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    ex.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(tmp,v));
    parser.prefix.add(Tupel.create(v,ex));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr ::= IDENT INCOP 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression ex = new BinaryExpression(v, new Operator(Operator.PLUS), new IntegerConstant(1));
    ex.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    ex.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(tmp,v));
    parser.prefix.add(Tupel.create(v,ex));
    RESULT = tmp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr ::= INCOP IDENT 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.PLUS), new IntegerConstant(1));
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr ::= DECOP IDENT 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal()); 
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.MINUS), new IntegerConstant(1));
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT=tmp;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr ::= IDENT PLUSEQ expr 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.PLUS), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr ::= IDENT MINUSEQ expr 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.MINUS), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr ::= IDENT DIVEQ expr 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.DIV), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr ::= IDENT MULEQ expr 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> i = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    int num = parser.sym.getId(i.getTerminal());  
    if(num == -1) parser.report_fatal_error("variable not declarated", i);
    Type typ = parser.sym.getType(num);
    Variable v = new Variable(num,i.getTerminal(),typ);
    Expression e = new BinaryExpression(v, new Operator(Operator.MUL), lhs);
    e.putAnnotation("__location_left", i.getAnnotation("__location_left"));
    e.putAnnotation("__location_right", i.getAnnotation("__location_right"));
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),typ);
    parser.prefix.add(Tupel.create(v,e));
    parser.prefix.add(Tupel.create(tmp,v));
    RESULT = tmp;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr ::= IDENT LPAR RPAR 
            {
              Expression RESULT =null;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Terminal<String> rhs = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
    Type typ = parser.sym.getType(rhs.getTerminal());
    if (typ instanceof PointerTo) typ=((PointerTo)typ).getInner();
    if (!(typ instanceof Function)) parser.report_fatal_error("function call on non function type",rhs);
    Type rettyp = ((Function)typ).getReturnType();
    Expression e = new petter.cfg.expression.MethodCall(rhs.getTerminal(), typ, new ArrayList<Expression>());    
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),rettyp);
    parser.prefix.add(Tupel.create(tmp,e));
    RESULT = tmp;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr ::= IDENT LPAR exprlist RPAR 
            {
              Expression RESULT =null;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Terminal<String> rhs = (Terminal<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		AnnotatableList<Expression> l = (AnnotatableList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
    Type typ = parser.sym.getType(rhs.getTerminal());
    if (typ instanceof PointerTo) typ=((PointerTo)typ).getInner();
    if (!(typ instanceof Function)) parser.report_fatal_error("function call on non function type",rhs);
    Type rettyp = ((Function)typ).getReturnType();
    Expression e = new petter.cfg.expression.MethodCall(rhs.getTerminal(), typ, l.getList());    
    int tmpid = parser.sym.newTemporary(typ);
    Variable tmp = new Variable(tmpid,parser.sym.getName(tmpid),rettyp);
    parser.prefix.add(Tupel.create(tmp,e));
    RESULT = tmp;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // boolex ::= expr NEQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 = parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.NEQ));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed, new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.EQ));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // boolex ::= NOT boolex 
            {
              Tripel<State,State,State> RESULT =null;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> rhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

    State swap = rhs.c;
    rhs.c=rhs.b;
    rhs.b=swap;
    RESULT = rhs;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // boolex ::= LPAR boolex RPAR 
            {
              Tripel<State,State,State> RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Tripel<State,State,State> ex = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = ex;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // boolex ::= expr EQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 =parser.createAssertionEdge(s, succeded, new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.EQ));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.NEQ));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // boolex ::= boolex OR boolex 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tripel<State,State,State> lhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> rhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = lhs.a;
    s.putAnnotation("__location", lhs.getAnnotation("__location_left")); //TODO: check if correct location
    State succeded = parser.createState();
    State failed = parser.createState();
    parser.mergeStates(succeded, lhs.b);
    parser.mergeStates(succeded, rhs.b);

    parser.mergeStates(rhs.a, lhs.c);
    parser.mergeStates(failed, rhs.c);
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // boolex ::= boolex AND boolex 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Tripel<State,State,State> lhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Tripel<State,State,State> rhs = (Tripel<State,State,State>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = lhs.a;
    s.putAnnotation("__location", lhs.getAnnotation("__location_left")); //TODO: check if correct location
    State succeded = parser.createState();
    State failed = parser.createState();
    parser.mergeStates(rhs.a, lhs.b);
    parser.mergeStates(succeded, rhs.b);

    parser.mergeStates(failed, lhs.c);
    parser.mergeStates(failed, rhs.c);
    RESULT = new Tripel<State, State, State>(s, succeded, failed);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // boolex ::= expr GEQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    s.putAnnotation("__location", lhs.getAnnotation("__location_left")); //TODO: check if correct location
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 = parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GTQ));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LE));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // boolex ::= expr LEQ expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 = parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LEQ));
   a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GT));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // boolex ::= expr LT expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 =parser.createAssertionEdge(s, succeded,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LE));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GTQ));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // boolex ::= expr GT expr 
            {
              Tripel<State,State,State> RESULT =null;
		Location lhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expression lhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location rhsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rhsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expression rhs = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    State s = parser.createState();
    State succeded = parser.createState();
    State failed = parser.createState();
    Transition a1 =parser.createAssertionEdge(s, succeded, new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.GT));
    a1.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a1.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));

    Transition a2 = parser.createAssertionEdge(s, failed,  new BinaryExpression( lhs, new Operator(Operator.MINUS),  rhs), new Operator(Operator.LEQ));
    a2.putAnnotation( "__location_left", lhs.getAnnotation("__location_left"));
    a2.putAnnotation( "__location_right", rhs.getAnnotation("__location_right"));    
    RESULT = new Tripel<State, State, State>(s, succeded, failed);
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolex",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
